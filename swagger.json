{
  "openapi": "3.0.1",
  "info": {
    "title": "PEPM API",
    "version": "v1"
  },
  "paths": {
    "/api/analogue-models/{id}/parameters": {
      "post": {
        "tags": [
          "AnalogueModel Parameters"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddAnalogueModelParameterCommandForm"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAnalogueModelParameterCommandForm"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAnalogueModelParameterCommandForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddAnalogueModelParameterCommandForm"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AddAnalogueModelParameterCommandForm"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/AddAnalogueModelParameterCommandForm"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/AddAnalogueModelParameterCommandForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddAnalogueModelParameterCommandResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AddAnalogueModelParameterCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/analogue-models": {
      "get": {
        "tags": [
          "AnalogueModels"
        ],
        "summary": "Get a list of all AnalogueModels",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnalogueModelListQueryResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnalogueModelListQueryResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AnalogueModels"
        ],
        "summary": "Create new Analogue Model",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueModelCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueModelCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueModelCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueModelCommand"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueModelCommand"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueModelCommand"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueModelCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAnalogueModelCommandResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAnalogueModelCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/analogue-models/{id}": {
      "get": {
        "tags": [
          "AnalogueModels"
        ],
        "summary": "Get AnalogueModel by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnalogueModelQueryResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnalogueModelQueryResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "AnalogueModels"
        ],
        "summary": "Patch a AnalogueModel by Id with new values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAnalogueModelCommandResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAnalogueModelCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AnalogueModels"
        ],
        "summary": "Update AnalogueModel by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnalogueModelCommandBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnalogueModelCommandBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnalogueModelCommandBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnalogueModelCommandBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnalogueModelCommandBody"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnalogueModelCommandBody"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnalogueModelCommandBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAnalogueModelCommandResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAnalogueModelCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AnalogueModels"
        ],
        "summary": "Delete a AnalogueModel by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/analogue-models/{id}/input-models": {
      "post": {
        "tags": [
          "AnalogueModels"
        ],
        "summary": "Upload model files that later can be converted to PEPM models.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File",
                  "FileType"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  },
                  "FileType": {
                    "$ref": "#/components/schemas/UploadFileType"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                },
                "FileType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadAnalogueModelCommandResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UploadAnalogueModelCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/analogue-models/{id}/netcdf-models": {
      "post": {
        "tags": [
          "AnalogueModels"
        ],
        "summary": "Upload NetCDF model files that later can be converted to PEPM models.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadAnalogueModelCommandResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UploadAnalogueModelCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/analogues": {
      "get": {
        "tags": [
          "Analogues"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnalogueListQueryResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Analogues"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueCommand"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueCommand"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueCommand"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalogueCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAnalogueCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetJobListQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/jobs/{id}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetJobDetailQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/jobs/{id}/status": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get current job status for job. This will fetch current status from underlying compute engine and update the status for the supplied Job Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrentJobStatusCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/jobs/status": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Update current job status for job. This will fetch current status from underlying compute engine and update the status for the supplied Job Name.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobStatusCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobStatusCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobStatusCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobStatusCommand"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobStatusCommand"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobStatusCommand"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConvertAnalogueModelCommandResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get current job status for all jobs. This will fetch current status from underlying compute engine and update the status for all matching Jobs.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrentJobStatusListCommand"
                }
              }
            }
          }
        }
      }
    },
    "/api/jobs/compute/model-conversions": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Convert AnalogueModels to the internal format used by PEPM in order to perform calculations.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertAnalogueModelCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertAnalogueModelCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertAnalogueModelCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertAnalogueModelCommand"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ConvertAnalogueModelCommand"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ConvertAnalogueModelCommand"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ConvertAnalogueModelCommand"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/api/jobs/compute/channel-estimations": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Estimate channel on a Deltares based model.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateChannelCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateChannelCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateChannelCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateChannelCommand"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EstimateChannelCommand"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EstimateChannelCommand"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EstimateChannelCommand"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/api/parameters": {
      "get": {
        "tags": [
          "Parameters"
        ],
        "summary": "Get a list of all Parameters",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetParameterListQueryResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Parameters"
        ],
        "summary": "Create new Parameter",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateParameterCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateParameterCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateParameterCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateParameterCommand"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateParameterCommand"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateParameterCommand"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateParameterCommand"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/parameters/{id}": {
      "get": {
        "tags": [
          "Parameters"
        ],
        "summary": "Get Parameter details by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetParameterDetailQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Parameters"
        ],
        "summary": "Patch a Parameter by Id with new values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchParameterCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Parameters"
        ],
        "summary": "Update Parameter by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParameterCommandBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParameterCommandBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParameterCommandBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParameterCommandBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParameterCommandBody"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParameterCommandBody"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParameterCommandBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateParameterCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Parameters"
        ],
        "summary": "Delete a parameter by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/uploads": {
      "get": {
        "tags": [
          "Uploads"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUploadListQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/uploads/{id}": {
      "get": {
        "tags": [
          "Uploads"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUploadDetailQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/uploads/models": {
      "post": {
        "tags": [
          "Uploads"
        ],
        "summary": "Upload model files that later can be converted to PEPM models.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File",
                  "FileType",
                  "ModelId"
                ],
                "type": "object",
                "properties": {
                  "ModelId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary"
                  },
                  "FileType": {
                    "$ref": "#/components/schemas/UploadFileType"
                  }
                }
              },
              "encoding": {
                "ModelId": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "FileType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadAnalogueModelCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/uploads/models/manifest": {
      "post": {
        "tags": [
          "Uploads"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "FileExtension",
                  "FileName",
                  "FileSize",
                  "FileType",
                  "ModelId"
                ],
                "type": "object",
                "properties": {
                  "ModelId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "FileSize": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "FileName": {
                    "type": "string"
                  },
                  "FileExtension": {
                    "type": "string"
                  },
                  "FileType": {
                    "$ref": "#/components/schemas/UploadFileType"
                  }
                }
              },
              "encoding": {
                "ModelId": {
                  "style": "form"
                },
                "FileSize": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                },
                "FileExtension": {
                  "style": "form"
                },
                "FileType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareChunkedUploadCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/uploads/models/chunks": {
      "post": {
        "tags": [
          "Uploads"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Blob",
                  "ChunkNumber",
                  "ModelId",
                  "UploadId"
                ],
                "type": "object",
                "properties": {
                  "ModelId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "UploadId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "Blob": {
                    "type": "string",
                    "format": "binary"
                  },
                  "ChunkNumber": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "encoding": {
                "ModelId": {
                  "style": "form"
                },
                "UploadId": {
                  "style": "form"
                },
                "Blob": {
                  "style": "form"
                },
                "ChunkNumber": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadChunkCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/uploads/models/complete": {
      "post": {
        "tags": [
          "Uploads"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ModelId",
                  "UploadId"
                ],
                "type": "object",
                "properties": {
                  "ModelId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "UploadId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "encoding": {
                "ModelId": {
                  "style": "form"
                },
                "UploadId": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeModelCommandResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddAnalogueModelParameterCommandForm": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddParameterDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddAnalogueModelParameterCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/AddAnalogueModelParameterDto"
          }
        },
        "additionalProperties": false
      },
      "AddAnalogueModelParameterDto": {
        "type": "object",
        "properties": {
          "analogueModelId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sourceType": {
            "type": "string",
            "nullable": true
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddParameterDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddParameterDto": {
        "required": [
          "parameterId",
          "parameterValue"
        ],
        "type": "object",
        "properties": {
          "parameterId": {
            "type": "string",
            "format": "uuid"
          },
          "parameterValue": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AnalogueList": {
        "required": [
          "analogueId",
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "analogueId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AnalogueModelDetail": {
        "required": [
          "analogueModelId",
          "analogues",
          "description",
          "fileUploads",
          "isProcessed",
          "name",
          "sourceType"
        ],
        "type": "object",
        "properties": {
          "analogueModelId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "isProcessed": {
            "type": "boolean"
          },
          "sourceType": {
            "$ref": "#/components/schemas/AnalogueModelSourceType"
          },
          "analogues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalogueList"
            }
          },
          "fileUploads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadList"
            }
          }
        },
        "additionalProperties": false
      },
      "AnalogueModelList": {
        "required": [
          "analogueModelId",
          "description",
          "isProcessed",
          "name",
          "sourceType"
        ],
        "type": "object",
        "properties": {
          "analogueModelId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "isProcessed": {
            "type": "boolean"
          },
          "sourceType": {
            "$ref": "#/components/schemas/AnalogueModelSourceType"
          }
        },
        "additionalProperties": false
      },
      "AnalogueModelSourceType": {
        "enum": [
          "Deltares",
          "ResQML"
        ],
        "type": "string"
      },
      "ConvertAnalogueModelCommand": {
        "required": [
          "modelId"
        ],
        "type": "object",
        "properties": {
          "modelId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ConvertAnalogueModelCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/ConvertAnalogueModelDto"
          }
        },
        "additionalProperties": false
      },
      "ConvertAnalogueModelDto": {
        "required": [
          "jobId",
          "jobStatus",
          "jobType",
          "name"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "jobStatus": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "jobType": {
            "$ref": "#/components/schemas/JobType"
          }
        },
        "additionalProperties": false
      },
      "CreateAnalogueCommand": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateAnalogueCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/CreateAnalogueDto"
          }
        },
        "additionalProperties": false
      },
      "CreateAnalogueDto": {
        "type": "object",
        "properties": {
          "analogueId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateAnalogueModelCommand": {
        "required": [
          "name",
          "sourceType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sourceType": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateAnalogueModelCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/CreateAnalogueModelDto"
          }
        },
        "additionalProperties": false
      },
      "CreateAnalogueModelDto": {
        "required": [
          "analogueModelId",
          "name"
        ],
        "type": "object",
        "properties": {
          "analogueModelId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateParameterCommand": {
        "required": [
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EstimateChannelCommand": {
        "required": [
          "modelId"
        ],
        "type": "object",
        "properties": {
          "modelId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "GetAnalogueListQueryResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalogueList"
            }
          }
        },
        "additionalProperties": false
      },
      "GetAnalogueModelListQueryResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalogueModelList"
            }
          }
        },
        "additionalProperties": false
      },
      "GetAnalogueModelQueryResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/AnalogueModelDetail"
          }
        },
        "additionalProperties": false
      },
      "GetCurrentJobStatusCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/GetCurrentJobStatusDto"
          }
        },
        "additionalProperties": false
      },
      "GetCurrentJobStatusDto": {
        "required": [
          "jobId",
          "jobStatus",
          "jobType",
          "name"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "jobStatus": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "jobType": {
            "$ref": "#/components/schemas/JobType"
          }
        },
        "additionalProperties": false
      },
      "GetCurrentJobStatusListCommand": {
        "type": "object",
        "additionalProperties": false
      },
      "GetJobDetailQueryResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/JobDetail"
          }
        },
        "additionalProperties": false
      },
      "GetJobListQueryResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobList"
            }
          }
        },
        "additionalProperties": false
      },
      "GetParameterDetailQueryResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/ParameterDetail"
          }
        },
        "additionalProperties": false
      },
      "GetParameterListQueryResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterList"
            }
          }
        },
        "additionalProperties": false
      },
      "GetUploadDetailQueryResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/UploadDetail"
          }
        },
        "additionalProperties": false
      },
      "GetUploadListQueryResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadList"
            }
          }
        },
        "additionalProperties": false
      },
      "JobDetail": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "jobStatus": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "jobType": {
            "$ref": "#/components/schemas/JobType"
          }
        },
        "additionalProperties": false
      },
      "JobList": {
        "required": [
          "jobId",
          "jobStatus",
          "jobType",
          "name",
          "updated"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "jobStatus": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "jobType": {
            "$ref": "#/components/schemas/JobType"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "uploads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobListUploadsDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobListUploadsDto": {
        "required": [
          "uploadFileType",
          "uploadId",
          "uploadStatus"
        ],
        "type": "object",
        "properties": {
          "uploadId": {
            "type": "string",
            "format": "uuid"
          },
          "uploadStatus": {
            "$ref": "#/components/schemas/UploadStatus"
          },
          "uploadFileType": {
            "$ref": "#/components/schemas/UploadFileType"
          }
        },
        "additionalProperties": false
      },
      "JobStatus": {
        "enum": [
          "Unknown",
          "Created",
          "Started",
          "Running",
          "Successful",
          "Succeeded",
          "Failed"
        ],
        "type": "string"
      },
      "JobType": {
        "enum": [
          "Nrresqml",
          "Nrchannel",
          "Nrvariogram"
        ],
        "type": "string"
      },
      "MergeModelCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/MergeModelDto"
          }
        },
        "additionalProperties": false
      },
      "MergeModelDto": {
        "required": [
          "originalFileName",
          "uploadFileCategory",
          "uploadFileType",
          "uploadId",
          "uploadStatus"
        ],
        "type": "object",
        "properties": {
          "uploadId": {
            "type": "string",
            "format": "uuid"
          },
          "originalFileName": {
            "minLength": 1,
            "type": "string"
          },
          "uploadStatus": {
            "$ref": "#/components/schemas/UploadStatus"
          },
          "uploadFileType": {
            "$ref": "#/components/schemas/UploadFileType"
          },
          "uploadFileCategory": {
            "$ref": "#/components/schemas/UploadFileCategory"
          }
        },
        "additionalProperties": false
      },
      "Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationType": {
        "enum": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test",
          "Invalid"
        ],
        "type": "string"
      },
      "ParameterDetail": {
        "required": [
          "description",
          "identifier",
          "name",
          "parameterId"
        ],
        "type": "object",
        "properties": {
          "parameterId": {
            "type": "string",
            "format": "uuid"
          },
          "identifier": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ParameterList": {
        "required": [
          "description",
          "identifier",
          "name",
          "parameterId"
        ],
        "type": "object",
        "properties": {
          "parameterId": {
            "type": "string",
            "format": "uuid"
          },
          "identifier": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PatchAnalogueModelCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/PatchAnalogueModelDto"
          }
        },
        "additionalProperties": false
      },
      "PatchAnalogueModelDto": {
        "required": [
          "analogueModelId",
          "name"
        ],
        "type": "object",
        "properties": {
          "analogueModelId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PatchParameterCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/PatchParameterDto"
          }
        },
        "additionalProperties": false
      },
      "PatchParameterDto": {
        "required": [
          "identifier",
          "name",
          "parameterId"
        ],
        "type": "object",
        "properties": {
          "parameterId": {
            "type": "string",
            "format": "uuid"
          },
          "identifier": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PrepareChunkedUploadCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/PrepareChunkedUploadDto"
          }
        },
        "additionalProperties": false
      },
      "PrepareChunkedUploadDto": {
        "required": [
          "fileSize",
          "numChunks",
          "uploadId"
        ],
        "type": "object",
        "properties": {
          "uploadId": {
            "type": "string",
            "format": "uuid"
          },
          "numChunks": {
            "type": "integer",
            "format": "int32"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "UpdateAnalogueModelCommandBody": {
        "required": [
          "name",
          "sourceType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sourceType": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateAnalogueModelCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/UpdateAnalogueModelDto"
          }
        },
        "additionalProperties": false
      },
      "UpdateAnalogueModelDto": {
        "required": [
          "analogueModelId",
          "name",
          "sourceType"
        ],
        "type": "object",
        "properties": {
          "analogueModelId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sourceType": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateJobStatusCommand": {
        "required": [
          "name",
          "status"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "started": {
            "type": "string",
            "nullable": true
          },
          "ended": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateParameterCommandBody": {
        "required": [
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateParameterCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/UpdateParameterDto"
          }
        },
        "additionalProperties": false
      },
      "UpdateParameterDto": {
        "required": [
          "identifier",
          "name",
          "parameterId"
        ],
        "type": "object",
        "properties": {
          "parameterId": {
            "type": "string",
            "format": "uuid"
          },
          "identifier": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UploadAnalogueModelCommandResponse": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/UploadAnalogueModelDto"
          }
        },
        "additionalProperties": false
      },
      "UploadAnalogueModelDto": {
        "required": [
          "originalFileName",
          "uploadFileCategory",
          "uploadFileType",
          "uploadId",
          "uploadStatus"
        ],
        "type": "object",
        "properties": {
          "uploadId": {
            "type": "string",
            "format": "uuid"
          },
          "originalFileName": {
            "minLength": 1,
            "type": "string"
          },
          "uploadStatus": {
            "$ref": "#/components/schemas/UploadStatus"
          },
          "uploadFileType": {
            "$ref": "#/components/schemas/UploadFileType"
          },
          "uploadFileCategory": {
            "$ref": "#/components/schemas/UploadFileCategory"
          }
        },
        "additionalProperties": false
      },
      "UploadChunkCommandResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UploadDetail": {
        "required": [
          "originalFileName",
          "uploadFileCategory",
          "uploadFileType",
          "uploadId",
          "uploadStatus"
        ],
        "type": "object",
        "properties": {
          "uploadId": {
            "type": "string",
            "format": "uuid"
          },
          "originalFileName": {
            "minLength": 1,
            "type": "string"
          },
          "uploadStatus": {
            "$ref": "#/components/schemas/UploadStatus"
          },
          "uploadFileType": {
            "$ref": "#/components/schemas/UploadFileType"
          },
          "uploadFileCategory": {
            "$ref": "#/components/schemas/UploadFileCategory"
          }
        },
        "additionalProperties": false
      },
      "UploadFileCategory": {
        "enum": [
          "InputModel",
          "InputMetadata",
          "ResQmlModel"
        ],
        "type": "string"
      },
      "UploadFileType": {
        "enum": [
          "NetCDF",
          "ResQMLEpc",
          "ResQMLData"
        ],
        "type": "string"
      },
      "UploadList": {
        "required": [
          "analogueModelId",
          "originalFileName",
          "uploadFileCategory",
          "uploadFileType",
          "uploadId",
          "uploadStatus"
        ],
        "type": "object",
        "properties": {
          "uploadId": {
            "type": "string",
            "format": "uuid"
          },
          "analogueModelId": {
            "type": "string",
            "format": "uuid"
          },
          "originalFileName": {
            "minLength": 1,
            "type": "string"
          },
          "uploadStatus": {
            "$ref": "#/components/schemas/UploadStatus"
          },
          "uploadFileType": {
            "$ref": "#/components/schemas/UploadFileType"
          },
          "uploadFileCategory": {
            "$ref": "#/components/schemas/UploadFileCategory"
          }
        },
        "additionalProperties": false
      },
      "UploadStatus": {
        "enum": [
          "Started",
          "ReadyForProcessing",
          "Processing",
          "Processed",
          "Failed"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://login.microsoftonline.com/3aa4a235-b6e2-48d5-9195-7fcf05b459b0/oauth2/v2.0/authorize",
            "tokenUrl": "https://login.microsoftonline.com/3aa4a235-b6e2-48d5-9195-7fcf05b459b0/oauth2/v2.0/token",
            "scopes": {
              "api://e8a0f8e6-059b-426f-9011-40f463640285/read": "Read the API"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": [
        "api://e8a0f8e6-059b-426f-9011-40f463640285/read"
      ]
    }
  ]
}