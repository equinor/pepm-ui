// This file is auto-generated by @hey-api/openapi-ts

export type AddAnalogueModelAreaCommandForm = {
  expand?: string | null;
  isProcessed?: boolean | null;
  stratigraphicGroupsCountryIdentifier?: string | null;
  stratigraphicGroupsFieldIdentifier?: string | null;
  stratigraphicGroupsStratColumnIdentifier?: string | null;
  stratigraphicGroupsStratUnitIdentifier?: string | null;
  outcropsName?: string | null;
  modelAreaTypeId: string;
  coordinates: Array<CoordinateDto>;
};

export type AddAnalogueModelAreaCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: ModelAreaDto;
};

export type AddAnalogueModelOutcropForm = {
  outcropId?: string;
};

export type AddAnalogueModelOutcropResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: OutcropDto;
};

export type AddGeologicalGroupCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: GeologicalGroupDto;
};

export type AddGeologicalGroupForm = {
  grossDepEnvId: string;
  depEnvId: string;
  subEnvId: string;
  architecturalElements: Array<string>;
};

export type AddStatigraphicGroupForm = {
  countryId: string;
  fieldId: string;
  stratigraphicColumnId: string;
  stratigraphicUnitIds: Array<string>;
};

export type AddStratigraphicGroupCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: StratigraphicGroupDto;
};

export type AnalogueModelConfigurationDto = {
  analogueModelConfigurationId?: string;
  analogueModelId?: string;
  template?: ConfigurationParameterDto;
  simStopTime?: ConfigurationParameterDto;
  outputInterval?: ConfigurationParameterDto;
  basinSlope?: ConfigurationParameterDto;
  channelWidth?: ConfigurationParameterDto;
  riverLength?: ConfigurationParameterDto;
  riverDischargeIni?: ConfigurationParameterDto;
  riverDischargeFin?: ConfigurationParameterDto;
  tidalAmplitude?: ConfigurationParameterDto;
  waveHeightIni?: ConfigurationParameterDto;
  waveHeightFin?: ConfigurationParameterDto;
  waveDirection?: ConfigurationParameterDto;
  subsidenceLand?: ConfigurationParameterDto;
  subsidenceSea?: ConfigurationParameterDto;
  composition?: ConfigurationParameterDto;
  archels: Array<ConfigurationArchelDto>;
};

export type AnalogueModelDetail = {
  createdBy?: string | null;
  createdDate?: Date;
  lastModifiedBy?: string | null;
  lastModifiedDate?: Date;
  analogueModelId: string;
  name: string;
  description: string;
  isProcessed: boolean;
  sourceType: AnalogueModelSourceType;
  fileUploads: Array<UploadList>;
  modelAreas: Array<ModelAreaDto>;
  stratigraphicGroups: Array<StratigraphicGroupDto>;
  geologicalGroups: Array<GeologicalGroupDto>;
  outcrops: Array<OutcropDto>;
  processingStatus: JobStatus;
  analogueModelImage: AnalogueModelImageDto;
  iniParameters: AnalogueModelConfigurationDto;
};

export type AnalogueModelImageDto = {
  analogueModelImageId: string;
  fileName: string;
  type: FileType;
};

export type AnalogueModelList = {
  uploads: Array<UploadList>;
  modelAreas: Array<ModelAreaDto>;
  stratigraphicGroups: Array<StratigraphicGroupDto>;
  geologicalGroups: Array<GeologicalGroupDto>;
  outcrops: Array<OutcropDto>;
  iniParameters: AnalogueModelConfigurationDto;
  analogueModelId: string;
  name: string;
  description: string;
  isProcessed: boolean;
  sourceType: AnalogueModelSourceType;
  processingStatus: JobStatus;
};

export type AnalogueModelSourceType = 'Deltares' | 'ResQML';

export const AnalogueModelSourceType = {
  DELTARES: 'Deltares',
  RES_QML: 'ResQML',
} as const;

export type CancelJobDto = {
  jobId: string;
  name: string;
  jobStatus: JobStatus;
  jobType: JobType;
};

export type ComputeCaseDto = {
  computeCaseId: string;
  modelArea: ComputeCaseModelAreaDto;
  computeMethod: ComputeMethod;
  computeType: ComputeType;
  inputSettings: Array<ComputeCaseInputSettingsDto>;
  jobStatus: ComputeJobStatus;
};

export type ComputeCaseInputSettingsDto = {
  value: string;
  name: string;
  computeType: string;
  computeMethod: string;
  inputValueType: string;
  computeCaseId: string;
  computeSettingId: string;
};

export type ComputeCaseModelAreaDto = {
  modelAreaId: string;
  name: string;
};

export type ComputeJobStatus =
  | 'NotStarted'
  | 'Created'
  | 'Waiting'
  | 'Running'
  | 'Succeeded'
  | 'Failed';

export const ComputeJobStatus = {
  NOT_STARTED: 'NotStarted',
  CREATED: 'Created',
  WAITING: 'Waiting',
  RUNNING: 'Running',
  SUCCEEDED: 'Succeeded',
  FAILED: 'Failed',
} as const;

export type ComputeMethod =
  | 'NetToGross'
  | 'Indicator'
  | 'ContiniousParameter'
  | 'Mouthbar'
  | 'Channel';

export const ComputeMethod = {
  NET_TO_GROSS: 'NetToGross',
  INDICATOR: 'Indicator',
  CONTINIOUS_PARAMETER: 'ContiniousParameter',
  MOUTHBAR: 'Mouthbar',
  CHANNEL: 'Channel',
} as const;

export type ComputeType = 'Variogram' | 'Object';

export const ComputeType = {
  VARIOGRAM: 'Variogram',
  OBJECT: 'Object',
} as const;

export type ConfigurationArchelDto = {
  analogueModelConfigurationArchelId?: string;
  name?: string | null;
  value?: string | null;
};

export type ConfigurationParameterDto = {
  name?: string | null;
  value?: string | null;
  description?: string | null;
};

export type ConvertAnalogueModelCommand = {
  modelId: string;
};

export type ConvertAnalogueModelCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: ConvertAnalogueModelDto;
};

export type ConvertAnalogueModelDto = {
  jobId: string;
  name: string;
  jobStatus: JobStatus;
  jobType: JobType;
};

export type CoordinateDto = {
  x: number;
  y: number;
  m: number;
};

export type CountryDto = {
  countryId: string;
  identifier: string;
};

export type CreateAnalogueModelCommand = {
  name: string;
  description?: string | null;
  sourceType: string;
};

export type CreateAnalogueModelCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: CreateAnalogueModelDto;
};

export type CreateAnalogueModelDto = {
  analogueModelId: string;
  name: string;
  description?: string | null;
};

export type CreateComputeCaseCommandForm = {
  modelAreaId?: string | null;
  computeType: ComputeType;
  computeMethod: ComputeMethod;
  inputSettings: Array<string>;
};

export type CreateComputeCaseCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: ComputeCaseDto;
};

export type DeleteGeologicalGroupCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: string;
};

export type DeleteOutcropResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: string;
};

export type DeleteStratigraphicGroupCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: string;
};

export type ErrorResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: string;
};

export type EstimateObjectCommand = {
  modelId: string;
  computeCaseId: string;
};

export type EstimateObjectCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: EstimateObjectDto;
};

export type EstimateObjectDto = {
  jobId: string;
  name: string;
  jobStatus: JobStatus;
  jobType: JobType;
};

export type EstimateVariogramCommand = {
  modelId: string;
  computeCaseId: string;
};

export type EstimateVariogramCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: EstimateVariogramDto;
};

export type EstimateVariogramDto = {
  jobId: string;
  name: string;
  jobStatus: JobStatus;
  jobType: JobType;
};

export type FieldDto = {
  fieldId: string;
  identifier: string;
  countryId: string;
};

// export type File = {
//   [key: string]: never;
// };

export type FileType = 'JPG' | 'PNG' | 'CSV';

export const FileType = {
  JPG: 'JPG',
  PNG: 'PNG',
  CSV: 'CSV',
} as const;

export type GenerateThumbnailCommand = {
  modelId: string;
};

export type GenerateThumbnailCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: GenerateThumbnailDto;
};

export type GenerateThumbnailDto = {
  jobId: string;
  name: string;
  jobStatus: JobStatus;
  jobType: JobType;
};

export type GeologicalGroupDto = {
  geologicalGroupId: string;
  grossDepEnv: GeologicalStandardDto;
  depEnv: GeologicalStandardDto;
  subenv: GeologicalStandardDto;
  architecturalElements: Array<GeologicalStandardDto>;
};

export type GeologicalStandardDto = {
  geologicalStandardId: string;
  identifier: string;
  geologicalStandardParentId?: string | null;
  geologyGroup: string;
  equinorCode: number;
};

export type GetAnalogueModelListQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<AnalogueModelList>;
};

export type GetAnalogueModelQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: AnalogueModelDetail;
};

export type GetCurrentJobStatusCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: GetCurrentJobStatusDto;
};

export type GetCurrentJobStatusDto = {
  jobId: string;
  name: string;
  jobStatus: JobStatus;
  jobType: JobType;
};

export type GetCurrentJobStatusListCommand = {
  [key: string]: never;
};

export type GetImageMetadataCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: ImageMetadataDto;
};

export type GetJobDetailQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: JobDetail;
};

export type GetJobListQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<JobList>;
};

export type GetObjectResultsByModelIdQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<GetObjectResultsDto>;
};

export type GetObjectResultsDto = {
  objectResultId: string;
  computeCaseId: string;
  type: ComputeType;
  status: ResultStatus;
  objectResultFiles: Array<GetObjectResultsFileDto>;
  segmentWidth: ObjectEstimationResultDto;
  width: ObjectEstimationResultDto;
  length: ObjectEstimationResultDto;
  segmentHeight: ObjectEstimationResultDto;
  height: ObjectHeightDto;
  box: Array<CoordinateDto>;
};

export type GetObjectResultsFileDto = {
  fileName: string;
  objectResultFileId: string;
};

export type GetOutcropsCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<GetOutcropsDto>;
};

export type GetOutcropsDto = {
  outcropId: string;
  name: string;
  outcropCategory: string;
  basins: Array<string>;
  region: GetOutcropsRegionDto;
};

export type GetOutcropsLocationDto = {
  locationId: string;
  regionId: string;
  locationName: string;
  country: string;
};

export type GetOutcropsRegionDto = {
  regionId: string;
  name: string;
  locations: Array<GetOutcropsLocationDto>;
};

export type GetUploadDetailQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: UploadDetail;
};

export type GetUploadListQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<UploadList>;
};

export type GetVariogramResultsByModelIdQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<GetVariogramResultsDto>;
};

export type GetVariogramResultsDto = {
  computeCaseId: string;
  variogramResultId: string;
  identifier: number;
  status: ResultStatus;
  variogramResultFiles: Array<GetVariogramResultsVariogramResultFileDto>;
  rmajor: number;
  rminor: number;
  azimuth: number;
  rvertical: number;
  sigma: number;
  quality: number;
  qualityX: number;
  qualityY: number;
  qualityZ: number;
  family: string;
  archelFilter?: string | null;
  indicator?: string | null;
  customIndicator?: string | null;
  attribute?: string | null;
  box: Array<CoordinateDto>;
};

export type GetVariogramResultsVariogramResultFileDto = {
  fileName: string;
  variogramResultFileId: string;
};

export type ImageMetadataDto = {
  modelName: string;
  boundingBox: ThumbnailBoundingBoxDto;
  colorLegend: {
    [key: string]: string;
  };
};

export type InputValueType =
  | 'Indicator'
  | 'NetToGross'
  | 'VariogramFamilyFilter'
  | 'AttributeName'
  | 'Archel';

export const InputValueType = {
  INDICATOR: 'Indicator',
  NET_TO_GROSS: 'NetToGross',
  VARIOGRAM_FAMILY_FILTER: 'VariogramFamilyFilter',
  ATTRIBUTE_NAME: 'AttributeName',
  ARCHEL: 'Archel',
} as const;

export type JobDetail = {
  jobId?: string;
  name?: string | null;
  jobStatus?: JobStatus;
  jobType?: JobType;
};

export type JobList = {
  jobId: string;
  name: string;
  jobStatus: JobStatus;
  jobType: JobType;
  updated: Date;
  uploads?: Array<JobListUploadsDto> | null;
};

export type JobListUploadsDto = {
  uploadId: string;
  uploadStatus: UploadStatus;
  uploadFileType: UploadFileType;
};

export type JobStatus =
  | 'Unknown'
  | 'Created'
  | 'Waiting'
  | 'Running'
  | 'Succeeded'
  | 'Failed';

export const JobStatus = {
  UNKNOWN: 'Unknown',
  CREATED: 'Created',
  WAITING: 'Waiting',
  RUNNING: 'Running',
  SUCCEEDED: 'Succeeded',
  FAILED: 'Failed',
} as const;

export type JobType =
  | 'Nrresqml'
  | 'Nrchannel'
  | 'Nrvariogram'
  | 'NrthumbnailGen';

export const JobType = {
  NRRESQML: 'Nrresqml',
  NRCHANNEL: 'Nrchannel',
  NRVARIOGRAM: 'Nrvariogram',
  NRTHUMBNAIL_GEN: 'NrthumbnailGen',
} as const;

export type ListAllQueryResponse = {
  countries: Array<CountryDto>;
  fields: Array<FieldDto>;
  stratUnits: Array<StratUnitDto>;
  stratColumns: Array<StratColumnDto>;
  geologicalStandards: Array<GeologicalStandardDto>;
};

export type ListComputeCasesByAnalogueModelIdQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<ComputeCaseDto>;
};

export type ListComputeSettingsMethodDto = {
  objectComputeSettings?: Array<ListComputeSettingsModelDto> | null;
  variogramComputeSettings?: Array<ListComputeSettingsModelDto> | null;
};

export type ListComputeSettingsModelDto = {
  computeSettingId?: string;
  computeType?: ComputeType;
  computeMethod?: ComputeMethod;
  inputValueType?: InputValueType;
  value?: string | null;
  name?: string | null;
};

export type ListComputeSettingsQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: ListComputeSettingsMethodDto;
};

export type ListCountriesQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<CountryDto>;
};

export type ListFieldsQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<FieldDto>;
};

export type ListGeoStandardsQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<GeologicalStandardDto>;
};

export type ListModelAreaTypesQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<ModelAreaTypeDto>;
};

export type ListStratColumnQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<StratColumnDto>;
};

export type ListStratUnitsQueryResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<StratUnitDto>;
};

export type LocationDto = {
  locationId: string;
  regionId: string;
  locationName: string;
  country: string;
};

export type MergeModelCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: MergeModelDto;
};

export type MergeModelDto = {
  uploadId: string;
  originalFileName: string;
  uploadStatus: UploadStatus;
  uploadFileType: UploadFileType;
  uploadFileCategory: UploadFileCategory;
};

export type ModelAreaDto = {
  modelAreaId: string;
  modelAreaType: string;
  coordinates: Array<CoordinateDto>;
};

export type ModelAreaTypeDto = {
  modelAreaTypeId: string;
  name: string;
  description: string;
};

export type ObjectEstimationResultDto = {
  mean: number;
  sd: number;
  count: number;
  coefficentOfVariation: number;
  meanEstimateStandardError: number;
  min: number;
  max: number;
  percentiles: PercentilesDto;
};

export type ObjectHeightDto = {
  mean: number;
  sd: number;
  count: number;
  coefficentOfVariation: number;
  meanEstimateStandardError: number;
  min: number;
  max: number;
  percentiles: PercentilesDto;
  modeSd: number;
  modeMean: number;
};

export type Operation = {
  operationType?: OperationType;
  path?: string | null;
  op?: string | null;
  from?: string | null;
  value?: unknown;
};

export type OperationType =
  | 'Add'
  | 'Remove'
  | 'Replace'
  | 'Move'
  | 'Copy'
  | 'Test'
  | 'Invalid';

export const OperationType = {
  ADD: 'Add',
  REMOVE: 'Remove',
  REPLACE: 'Replace',
  MOVE: 'Move',
  COPY: 'Copy',
  TEST: 'Test',
  INVALID: 'Invalid',
} as const;

export type OutcropDto = {
  outcropId: string;
  name: string;
  outcropCategory: string;
  basins: Array<string>;
  region: RegionDto;
};

export type PatchAnalogueModelCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: PatchAnalogueModelDto;
};

export type PatchAnalogueModelDto = {
  analogueModelId: string;
  name: string;
  description?: string | null;
};

export type PercentilesDto = {
  p10: number;
  p20: number;
  p30: number;
  p40: number;
  p50: number;
  p60: number;
  p70: number;
  p80: number;
  p90: number;
};

export type PostCancelJobCommand = {
  modelId: string;
  computeCaseId: string;
};

export type PostCancelJobCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: CancelJobDto;
};

export type PrepareChunkedUploadCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: PrepareChunkedUploadDto;
};

export type PrepareChunkedUploadDto = {
  uploadId: string;
  numChunks: number;
  fileSize: bigint;
};

export type ProblemDetails = {
  type?: string | null;
  title?: string | null;
  status?: number | null;
  detail?: string | null;
  instance?: string | null;
  [key: string]:
    | unknown
    | (string | null)
    | (string | null)
    | (number | null)
    | (string | null)
    | (string | null)
    | undefined;
};

export type RadixJobDto = {
  jobId?: string | null;
  name?: string | null;
  status?: string | null;
};

export type RegionDto = {
  regionId: string;
  name: string;
  locations: Array<LocationDto>;
};

export type ResultStatus = 'Draft' | 'Publish';

export const ResultStatus = {
  DRAFT: 'Draft',
  PUBLISH: 'Publish',
} as const;

export type StratColumnDto = {
  stratColumnId: string;
  identifier: string;
  countries: Array<CountryDto>;
};

export type StratUnitDto = {
  stratUnitId: string;
  identifier: string;
  stratColumnId: string;
  stratUnitParentId?: string | null;
  level: number;
  stratUnitType: string;
};

export type StratigraphicGroupDto = {
  stratigraphicGroupId: string;
  country: CountryDto;
  field: FieldDto;
  stratColumn: StratColumnDto;
  stratUnits: Array<StratUnitDto>;
};

export type ThumbnailBoundingBoxDto = {
  x0: number;
  y0: number;
  x1: number;
  y1: number;
};

export type UpdateAnalogueModelAreaCommandForm = {
  coordinates: Array<CoordinateDto>;
};

export type UpdateAnalogueModelCommandBody = {
  name: string;
  description?: string | null;
  sourceType: string;
};

export type UpdateAnalogueModelCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: UpdateAnalogueModelDto;
};

export type UpdateAnalogueModelDto = {
  analogueModelId: string;
  name: string;
  description?: string | null;
  sourceType: string;
};

export type UpdateComputeCaseCommandForm = {
  expand?: string | null;
  isProcessed?: boolean | null;
  stratigraphicGroupsCountryIdentifier?: string | null;
  stratigraphicGroupsFieldIdentifier?: string | null;
  stratigraphicGroupsStratColumnIdentifier?: string | null;
  stratigraphicGroupsStratUnitIdentifier?: string | null;
  outcropsName?: string | null;
  modelAreaId?: string | null;
  inputSettings: Array<string>;
};

export type UpdateJobStatusCommand = {
  name: string;
  started?: string | null;
  ended?: string | null;
  status: string;
  jobStatuses?: Array<RadixJobDto> | null;
};

export type UpdateJobStatusCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<UpdateJobStatusDto>;
};

export type UpdateJobStatusDto = {
  jobId: string;
  name: string;
  jobStatus: JobStatus;
  jobType: JobType;
};

export type UpdateObjectEstimationStatusCommand = {
  name: string;
  started?: string | null;
  ended?: string | null;
  status: string;
  jobStatuses?: Array<RadixJobDto> | null;
};

export type UpdateObjectEstimationStatusCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: Array<UpdateObjectEstimationStatusDto>;
};

export type UpdateObjectEstimationStatusDto = {
  jobId: string;
  name: string;
  jobStatus: JobStatus;
  jobType: JobType;
};

export type UpdateObjectResultCommandBody = {
  status: string;
};

export type UpdateObjectResultCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: UpdateObjectResultDto;
};

export type UpdateObjectResultDto = {
  analogueModelId: string;
  objectResultId: string;
  status: ResultStatus;
};

export type UpdateThumbnailGenStatusCommand = {
  name: string;
  started?: string | null;
  ended?: string | null;
  status: string;
  jobStatuses?: Array<RadixJobDto> | null;
};

export type UpdateVariogramEstimationStatusCommand = {
  name: string;
  started?: string | null;
  ended?: string | null;
  status: string;
  jobStatuses?: Array<RadixJobDto> | null;
};

export type UpdateVariogramResultCommandBody = {
  status: string;
  identifier: number;
};

export type UpdateVariogramResultCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: UpdateVariogramResultDto;
};

export type UpdateVariogramResultDto = {
  analogueModelId: string;
  computeCaseId: string;
  status: ResultStatus;
  identifier: number;
};

export type UploadAnalogueModelCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: UploadAnalogueModelDto;
};

export type UploadAnalogueModelDto = {
  uploadId: string;
  originalFileName: string;
  uploadStatus: UploadStatus;
  uploadFileType: UploadFileType;
  uploadFileCategory: UploadFileCategory;
};

export type UploadChunkCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: string;
};

export type UploadDetail = {
  uploadId: string;
  originalFileName: string;
  uploadStatus: UploadStatus;
  uploadFileType: UploadFileType;
  uploadFileCategory: UploadFileCategory;
};

export type UploadFileCategory = 'InputModel' | 'InputMetadata' | 'ResQmlModel';

export const UploadFileCategory = {
  INPUT_MODEL: 'InputModel',
  INPUT_METADATA: 'InputMetadata',
  RES_QML_MODEL: 'ResQmlModel',
} as const;

export type UploadFileType = 'NetCDF' | 'ResQMLEpc' | 'ResQMLData' | 'IniData';

export const UploadFileType = {
  NET_CDF: 'NetCDF',
  RES_QML_EPC: 'ResQMLEpc',
  RES_QML_DATA: 'ResQMLData',
  INI_DATA: 'IniData',
} as const;

export type UploadIniFileCommandResponse = {
  success?: boolean;
  count?: number | null;
  message?: string | null;
  validationErrors?: Array<string> | null;
  data: UploadIniFileDto;
};

export type UploadIniFileDto = {
  uploadId: string;
  originalFileName: string;
  uploadStatus: UploadStatus;
  uploadFileType: UploadFileType;
  uploadFileCategory: UploadFileCategory;
};

export type UploadList = {
  uploadId: string;
  analogueModelId: string;
  originalFileName: string;
  uploadStatus: UploadStatus;
  uploadFileType: UploadFileType;
  uploadFileCategory: UploadFileCategory;
};

export type UploadStatus = 'Started' | 'Completed' | 'Failed';

export const UploadStatus = {
  STARTED: 'Started',
  COMPLETED: 'Completed',
  FAILED: 'Failed',
} as const;

export type GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsData = {
  body?: never;
  path: {
    analogueModelId: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{analogueModelId}/compute-settings';
};

export type GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsError =
  GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsErrors[keyof GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsErrors];

export type GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsResponses = {
  /**
   * Success
   */
  200: ListComputeSettingsQueryResponse;
};

export type GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsResponse =
  GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsResponses[keyof GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsResponses];

export type GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdData = {
  body?: never;
  path: {
    analogueModelId: string;
    imageId: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{analogueModelId}/images/{imageId}';
};

export type GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdError =
  GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdErrors[keyof GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdErrors];

export type GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdResponses = {
  /**
   * Success
   */
  200: File;
};

export type GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdResponse =
  GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdResponses[keyof GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdResponses];

export type GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataData =
  {
    body?: never;
    path: {
      analogueModelId: string;
      imageId: string;
    };
    query?: never;
    url: '/api/v1/analogue-models/{analogueModelId}/images/{imageId}/metadata';
  };

export type GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataErrors =
  {
    /**
     * Forbidden
     */
    403: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
  };

export type GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataError =
  GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataErrors[keyof GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataErrors];

export type GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataResponses =
  {
    /**
     * Success
     */
    200: GetImageMetadataCommandResponse;
  };

export type GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataResponse =
  GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataResponses[keyof GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataResponses];

export type GetApiV1AnalogueModelsByIdComputeCasesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/compute-cases';
};

export type GetApiV1AnalogueModelsByIdComputeCasesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
};

export type GetApiV1AnalogueModelsByIdComputeCasesError =
  GetApiV1AnalogueModelsByIdComputeCasesErrors[keyof GetApiV1AnalogueModelsByIdComputeCasesErrors];

export type GetApiV1AnalogueModelsByIdComputeCasesResponses = {
  /**
   * Success
   */
  200: ListComputeCasesByAnalogueModelIdQueryResponse;
};

export type GetApiV1AnalogueModelsByIdComputeCasesResponse =
  GetApiV1AnalogueModelsByIdComputeCasesResponses[keyof GetApiV1AnalogueModelsByIdComputeCasesResponses];

export type PostApiV1AnalogueModelsByIdComputeCasesData = {
  body?: CreateComputeCaseCommandForm;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/compute-cases';
};

export type PostApiV1AnalogueModelsByIdComputeCasesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
};

export type PostApiV1AnalogueModelsByIdComputeCasesError =
  PostApiV1AnalogueModelsByIdComputeCasesErrors[keyof PostApiV1AnalogueModelsByIdComputeCasesErrors];

export type PostApiV1AnalogueModelsByIdComputeCasesResponses = {
  /**
   * Success
   */
  200: CreateComputeCaseCommandResponse;
};

export type PostApiV1AnalogueModelsByIdComputeCasesResponse =
  PostApiV1AnalogueModelsByIdComputeCasesResponses[keyof PostApiV1AnalogueModelsByIdComputeCasesResponses];

export type DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdData = {
  body?: never;
  path: {
    id: string;
    computeCaseId: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/compute-cases/{computeCaseId}';
};

export type DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdError =
  DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdErrors[keyof DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdErrors];

export type DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponses =
  {
    /**
     * Success
     */
    200: ListComputeCasesByAnalogueModelIdQueryResponse;
  };

export type DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponse =
  DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponses[keyof DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponses];

export type PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdData = {
  body?: UpdateComputeCaseCommandForm;
  path: {
    id: string;
    computeCaseId: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/compute-cases/{computeCaseId}';
};

export type PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
};

export type PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdError =
  PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdErrors[keyof PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdErrors];

export type PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponses = {
  /**
   * Success
   */
  200: ListComputeCasesByAnalogueModelIdQueryResponse;
};

export type PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponse =
  PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponses[keyof PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponses];

export type GetApiV1AnalogueModelsData = {
  body?: never;
  path?: never;
  query?: {
    expand?: string;
    isProcessed?: boolean;
    stratigraphicGroupsCountryIdentifier?: string;
    stratigraphicGroupsFieldIdentifier?: string;
    stratigraphicGroupsStratColumnIdentifier?: string;
    stratigraphicGroupsStratUnitIdentifier?: string;
    outcropsName?: string;
  };
  url: '/api/v1/analogue-models';
};

export type GetApiV1AnalogueModelsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1AnalogueModelsError =
  GetApiV1AnalogueModelsErrors[keyof GetApiV1AnalogueModelsErrors];

export type GetApiV1AnalogueModelsResponses = {
  /**
   * Success
   */
  200: GetAnalogueModelListQueryResponse;
};

export type GetApiV1AnalogueModelsResponse =
  GetApiV1AnalogueModelsResponses[keyof GetApiV1AnalogueModelsResponses];

export type PostApiV1AnalogueModelsData = {
  body?: CreateAnalogueModelCommand;
  path?: never;
  query?: never;
  url: '/api/v1/analogue-models';
};

export type PostApiV1AnalogueModelsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
};

export type PostApiV1AnalogueModelsError =
  PostApiV1AnalogueModelsErrors[keyof PostApiV1AnalogueModelsErrors];

export type PostApiV1AnalogueModelsResponses = {
  /**
   * Success
   */
  200: CreateAnalogueModelCommandResponse;
};

export type PostApiV1AnalogueModelsResponse =
  PostApiV1AnalogueModelsResponses[keyof PostApiV1AnalogueModelsResponses];

export type DeleteApiV1AnalogueModelsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}';
};

export type DeleteApiV1AnalogueModelsByIdErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type DeleteApiV1AnalogueModelsByIdError =
  DeleteApiV1AnalogueModelsByIdErrors[keyof DeleteApiV1AnalogueModelsByIdErrors];

export type DeleteApiV1AnalogueModelsByIdResponses = {
  /**
   * No Content
   */
  204: void;
};

export type DeleteApiV1AnalogueModelsByIdResponse =
  DeleteApiV1AnalogueModelsByIdResponses[keyof DeleteApiV1AnalogueModelsByIdResponses];

export type GetApiV1AnalogueModelsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    expand?: string;
    isProcessed?: boolean;
    stratigraphicGroupsCountryIdentifier?: string;
    stratigraphicGroupsFieldIdentifier?: string;
    stratigraphicGroupsStratColumnIdentifier?: string;
    stratigraphicGroupsStratUnitIdentifier?: string;
    outcropsName?: string;
  };
  url: '/api/v1/analogue-models/{id}';
};

export type GetApiV1AnalogueModelsByIdErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1AnalogueModelsByIdError =
  GetApiV1AnalogueModelsByIdErrors[keyof GetApiV1AnalogueModelsByIdErrors];

export type GetApiV1AnalogueModelsByIdResponses = {
  /**
   * Success
   */
  200: GetAnalogueModelQueryResponse;
};

export type GetApiV1AnalogueModelsByIdResponse =
  GetApiV1AnalogueModelsByIdResponses[keyof GetApiV1AnalogueModelsByIdResponses];

export type PatchApiV1AnalogueModelsByIdData = {
  body?: Array<Operation>;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}';
};

export type PatchApiV1AnalogueModelsByIdErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PatchApiV1AnalogueModelsByIdError =
  PatchApiV1AnalogueModelsByIdErrors[keyof PatchApiV1AnalogueModelsByIdErrors];

export type PatchApiV1AnalogueModelsByIdResponses = {
  /**
   * Success
   */
  200: PatchAnalogueModelCommandResponse;
};

export type PatchApiV1AnalogueModelsByIdResponse =
  PatchApiV1AnalogueModelsByIdResponses[keyof PatchApiV1AnalogueModelsByIdResponses];

export type PutApiV1AnalogueModelsByIdData = {
  body?: UpdateAnalogueModelCommandBody;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}';
};

export type PutApiV1AnalogueModelsByIdErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PutApiV1AnalogueModelsByIdError =
  PutApiV1AnalogueModelsByIdErrors[keyof PutApiV1AnalogueModelsByIdErrors];

export type PutApiV1AnalogueModelsByIdResponses = {
  /**
   * Success
   */
  200: UpdateAnalogueModelCommandResponse;
};

export type PutApiV1AnalogueModelsByIdResponse =
  PutApiV1AnalogueModelsByIdResponses[keyof PutApiV1AnalogueModelsByIdResponses];

export type PostApiV1AnalogueModelsByIdInputModelsData = {
  body?: {
    File: Blob | File;
    FileType: UploadFileType;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/input-models';
};

export type PostApiV1AnalogueModelsByIdInputModelsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
};

export type PostApiV1AnalogueModelsByIdInputModelsError =
  PostApiV1AnalogueModelsByIdInputModelsErrors[keyof PostApiV1AnalogueModelsByIdInputModelsErrors];

export type PostApiV1AnalogueModelsByIdInputModelsResponses = {
  /**
   * Success
   */
  200: UploadAnalogueModelCommandResponse;
};

export type PostApiV1AnalogueModelsByIdInputModelsResponse =
  PostApiV1AnalogueModelsByIdInputModelsResponses[keyof PostApiV1AnalogueModelsByIdInputModelsResponses];

export type PostApiV1AnalogueModelsByIdNetcdfModelsData = {
  body?: {
    file?: Blob | File;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/netcdf-models';
};

export type PostApiV1AnalogueModelsByIdNetcdfModelsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
};

export type PostApiV1AnalogueModelsByIdNetcdfModelsError =
  PostApiV1AnalogueModelsByIdNetcdfModelsErrors[keyof PostApiV1AnalogueModelsByIdNetcdfModelsErrors];

export type PostApiV1AnalogueModelsByIdNetcdfModelsResponses = {
  /**
   * Success
   */
  200: UploadAnalogueModelCommandResponse;
};

export type PostApiV1AnalogueModelsByIdNetcdfModelsResponse =
  PostApiV1AnalogueModelsByIdNetcdfModelsResponses[keyof PostApiV1AnalogueModelsByIdNetcdfModelsResponses];

export type PostApiV1AnalogueModelsByIdModelAreasData = {
  body?: AddAnalogueModelAreaCommandForm;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/model-areas';
};

export type PostApiV1AnalogueModelsByIdModelAreasErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
};

export type PostApiV1AnalogueModelsByIdModelAreasError =
  PostApiV1AnalogueModelsByIdModelAreasErrors[keyof PostApiV1AnalogueModelsByIdModelAreasErrors];

export type PostApiV1AnalogueModelsByIdModelAreasResponses = {
  /**
   * Success
   */
  200: AddAnalogueModelAreaCommandResponse;
};

export type PostApiV1AnalogueModelsByIdModelAreasResponse =
  PostApiV1AnalogueModelsByIdModelAreasResponses[keyof PostApiV1AnalogueModelsByIdModelAreasResponses];

export type PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdData = {
  body?: UpdateAnalogueModelAreaCommandForm;
  path: {
    id: string;
    modelAreaId: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/model-areas/{modelAreaId}';
};

export type PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdError =
  PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdErrors[keyof PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdErrors];

export type PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdResponses = {
  /**
   * Success
   */
  200: AddAnalogueModelAreaCommandResponse;
};

export type PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdResponse =
  PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdResponses[keyof PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdResponses];

export type PostApiV1AnalogueModelsByIdOutcropsData = {
  body?: AddAnalogueModelOutcropForm;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/outcrops';
};

export type PostApiV1AnalogueModelsByIdOutcropsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PostApiV1AnalogueModelsByIdOutcropsError =
  PostApiV1AnalogueModelsByIdOutcropsErrors[keyof PostApiV1AnalogueModelsByIdOutcropsErrors];

export type PostApiV1AnalogueModelsByIdOutcropsResponses = {
  /**
   * Success
   */
  200: AddAnalogueModelOutcropResponse;
};

export type PostApiV1AnalogueModelsByIdOutcropsResponse =
  PostApiV1AnalogueModelsByIdOutcropsResponses[keyof PostApiV1AnalogueModelsByIdOutcropsResponses];

export type DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdData = {
  body?: never;
  path: {
    id: string;
    outcropId: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/outcrops/{outcropId}';
};

export type DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdError =
  DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdErrors[keyof DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdErrors];

export type DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdResponses = {
  /**
   * Success
   */
  200: DeleteOutcropResponse;
};

export type DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdResponse =
  DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdResponses[keyof DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdResponses];

export type PostApiV1AnalogueModelsByIdStratigraphicGroupsData = {
  body?: AddStatigraphicGroupForm;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/stratigraphic-groups';
};

export type PostApiV1AnalogueModelsByIdStratigraphicGroupsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PostApiV1AnalogueModelsByIdStratigraphicGroupsError =
  PostApiV1AnalogueModelsByIdStratigraphicGroupsErrors[keyof PostApiV1AnalogueModelsByIdStratigraphicGroupsErrors];

export type PostApiV1AnalogueModelsByIdStratigraphicGroupsResponses = {
  /**
   * Success
   */
  200: AddStratigraphicGroupCommandResponse;
};

export type PostApiV1AnalogueModelsByIdStratigraphicGroupsResponse =
  PostApiV1AnalogueModelsByIdStratigraphicGroupsResponses[keyof PostApiV1AnalogueModelsByIdStratigraphicGroupsResponses];

export type PostApiV1AnalogueModelsByIdGeologicalGroupsData = {
  body?: AddGeologicalGroupForm;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/geological-groups';
};

export type PostApiV1AnalogueModelsByIdGeologicalGroupsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PostApiV1AnalogueModelsByIdGeologicalGroupsError =
  PostApiV1AnalogueModelsByIdGeologicalGroupsErrors[keyof PostApiV1AnalogueModelsByIdGeologicalGroupsErrors];

export type PostApiV1AnalogueModelsByIdGeologicalGroupsResponses = {
  /**
   * Success
   */
  200: AddGeologicalGroupCommandResponse;
};

export type PostApiV1AnalogueModelsByIdGeologicalGroupsResponse =
  PostApiV1AnalogueModelsByIdGeologicalGroupsResponses[keyof PostApiV1AnalogueModelsByIdGeologicalGroupsResponses];

export type DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdData =
  {
    body?: never;
    path: {
      analogueModelId: string;
      geologicalGroupId: string;
    };
    query?: never;
    url: '/api/v1/analogue-models/{analogueModelId}/geological-groups/{geologicalGroupId}';
  };

export type DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdErrors =
  {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Forbidden
     */
    403: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
  };

export type DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdError =
  DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdErrors[keyof DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdErrors];

export type DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdResponses =
  {
    /**
     * Success
     */
    200: DeleteGeologicalGroupCommandResponse;
  };

export type DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdResponse =
  DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdResponses[keyof DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdResponses];

export type DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdData =
  {
    body?: never;
    path: {
      analogueModelId: string;
      stratigraphicGroupId: string;
    };
    query?: never;
    url: '/api/v1/analogue-models/{analogueModelId}/stratigraphic-groups/{stratigraphicGroupId}';
  };

export type DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdErrors =
  {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Forbidden
     */
    403: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
  };

export type DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdError =
  DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdErrors[keyof DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdErrors];

export type DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdResponses =
  {
    /**
     * Success
     */
    200: DeleteStratigraphicGroupCommandResponse;
  };

export type DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdResponse =
  DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdResponses[keyof DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdResponses];

export type GetApiV1ByAnalogueModelIdComputeSettingsData = {
  body?: never;
  path: {
    analogueModelId: string;
  };
  query?: never;
  url: '/api/v1/{analogueModelId}/compute-settings';
};

export type GetApiV1ByAnalogueModelIdComputeSettingsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1ByAnalogueModelIdComputeSettingsError =
  GetApiV1ByAnalogueModelIdComputeSettingsErrors[keyof GetApiV1ByAnalogueModelIdComputeSettingsErrors];

export type GetApiV1ByAnalogueModelIdComputeSettingsResponses = {
  /**
   * Success
   */
  200: ListComputeSettingsQueryResponse;
};

export type GetApiV1ByAnalogueModelIdComputeSettingsResponse =
  GetApiV1ByAnalogueModelIdComputeSettingsResponses[keyof GetApiV1ByAnalogueModelIdComputeSettingsResponses];

export type GetApiV1DownloadsByIdResqmlData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/downloads/{id}/resqml';
};

export type GetApiV1DownloadsByIdResqmlErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1DownloadsByIdResqmlError =
  GetApiV1DownloadsByIdResqmlErrors[keyof GetApiV1DownloadsByIdResqmlErrors];

export type GetApiV1DownloadsByIdResqmlResponses = {
  /**
   * Success
   */
  200: File;
};

export type GetApiV1DownloadsByIdResqmlResponse =
  GetApiV1DownloadsByIdResqmlResponses[keyof GetApiV1DownloadsByIdResqmlResponses];

export type GetApiV1DownloadsByIdIniData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/downloads/{id}/ini';
};

export type GetApiV1DownloadsByIdIniErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1DownloadsByIdIniError =
  GetApiV1DownloadsByIdIniErrors[keyof GetApiV1DownloadsByIdIniErrors];

export type GetApiV1DownloadsByIdIniResponses = {
  /**
   * Success
   */
  200: File;
};

export type GetApiV1DownloadsByIdIniResponse =
  GetApiV1DownloadsByIdIniResponses[keyof GetApiV1DownloadsByIdIniResponses];

export type GetApiV1DownloadsByIdNcData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/downloads/{id}/nc';
};

export type GetApiV1DownloadsByIdNcErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1DownloadsByIdNcError =
  GetApiV1DownloadsByIdNcErrors[keyof GetApiV1DownloadsByIdNcErrors];

export type GetApiV1DownloadsByIdNcResponses = {
  /**
   * Success
   */
  200: File;
};

export type GetApiV1DownloadsByIdNcResponse =
  GetApiV1DownloadsByIdNcResponses[keyof GetApiV1DownloadsByIdNcResponses];

export type GetApiV1DownloadsAnalogueModelsExcelData = {
  body?: never;
  path?: never;
  query?: {
    AnalogueModelIds?: Array<string>;
  };
  url: '/api/v1/downloads/analogue-models-excel';
};

export type GetApiV1DownloadsAnalogueModelsExcelErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1DownloadsAnalogueModelsExcelError =
  GetApiV1DownloadsAnalogueModelsExcelErrors[keyof GetApiV1DownloadsAnalogueModelsExcelErrors];

export type GetApiV1DownloadsAnalogueModelsExcelResponses = {
  /**
   * Success
   */
  200: File;
};

export type GetApiV1DownloadsAnalogueModelsExcelResponse =
  GetApiV1DownloadsAnalogueModelsExcelResponses[keyof GetApiV1DownloadsAnalogueModelsExcelResponses];

export type GetApiV1ImagesVariogramByImageIdData = {
  body?: never;
  path: {
    imageId: string;
  };
  query?: never;
  url: '/api/v1/images/variogram/{imageId}';
};

export type GetApiV1ImagesVariogramByImageIdErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1ImagesVariogramByImageIdError =
  GetApiV1ImagesVariogramByImageIdErrors[keyof GetApiV1ImagesVariogramByImageIdErrors];

export type GetApiV1ImagesVariogramByImageIdResponses = {
  /**
   * Success
   */
  200: File;
};

export type GetApiV1ImagesVariogramByImageIdResponse =
  GetApiV1ImagesVariogramByImageIdResponses[keyof GetApiV1ImagesVariogramByImageIdResponses];

export type GetApiV1JobsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/jobs';
};

export type GetApiV1JobsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1JobsError = GetApiV1JobsErrors[keyof GetApiV1JobsErrors];

export type GetApiV1JobsResponses = {
  /**
   * Success
   */
  200: GetJobListQueryResponse;
};

export type GetApiV1JobsResponse =
  GetApiV1JobsResponses[keyof GetApiV1JobsResponses];

export type GetApiV1JobsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/jobs/{id}';
};

export type GetApiV1JobsByIdErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1JobsByIdError =
  GetApiV1JobsByIdErrors[keyof GetApiV1JobsByIdErrors];

export type GetApiV1JobsByIdResponses = {
  /**
   * Success
   */
  200: GetJobDetailQueryResponse;
};

export type GetApiV1JobsByIdResponse =
  GetApiV1JobsByIdResponses[keyof GetApiV1JobsByIdResponses];

export type GetApiV1JobsByIdStatusData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/jobs/{id}/status';
};

export type GetApiV1JobsByIdStatusErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1JobsByIdStatusError =
  GetApiV1JobsByIdStatusErrors[keyof GetApiV1JobsByIdStatusErrors];

export type GetApiV1JobsByIdStatusResponses = {
  /**
   * Success
   */
  200: GetCurrentJobStatusCommandResponse;
};

export type GetApiV1JobsByIdStatusResponse =
  GetApiV1JobsByIdStatusResponses[keyof GetApiV1JobsByIdStatusResponses];

export type GetApiV1JobsStatusData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/jobs/status';
};

export type GetApiV1JobsStatusErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1JobsStatusError =
  GetApiV1JobsStatusErrors[keyof GetApiV1JobsStatusErrors];

export type GetApiV1JobsStatusResponses = {
  /**
   * Success
   */
  200: GetCurrentJobStatusListCommand;
};

export type GetApiV1JobsStatusResponse =
  GetApiV1JobsStatusResponses[keyof GetApiV1JobsStatusResponses];

export type PostApiV1JobsCancelData = {
  body?: PostCancelJobCommand;
  path?: never;
  query?: never;
  url: '/api/v1/jobs/cancel';
};

export type PostApiV1JobsCancelErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PostApiV1JobsCancelError =
  PostApiV1JobsCancelErrors[keyof PostApiV1JobsCancelErrors];

export type PostApiV1JobsCancelResponses = {
  /**
   * Accepted
   */
  202: PostCancelJobCommandResponse;
};

export type PostApiV1JobsCancelResponse =
  PostApiV1JobsCancelResponses[keyof PostApiV1JobsCancelResponses];

export type PostApiV1JobsComputeModelConversionsData = {
  body?: ConvertAnalogueModelCommand;
  path?: never;
  query?: never;
  url: '/api/v1/jobs/compute/model-conversions';
};

export type PostApiV1JobsComputeModelConversionsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PostApiV1JobsComputeModelConversionsError =
  PostApiV1JobsComputeModelConversionsErrors[keyof PostApiV1JobsComputeModelConversionsErrors];

export type PostApiV1JobsComputeModelConversionsResponses = {
  /**
   * Accepted
   */
  202: ConvertAnalogueModelCommandResponse;
};

export type PostApiV1JobsComputeModelConversionsResponse =
  PostApiV1JobsComputeModelConversionsResponses[keyof PostApiV1JobsComputeModelConversionsResponses];

export type PostApiV1JobsComputeObjectEstimationsData = {
  body?: EstimateObjectCommand;
  path?: never;
  query?: never;
  url: '/api/v1/jobs/compute/object-estimations';
};

export type PostApiV1JobsComputeObjectEstimationsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
};

export type PostApiV1JobsComputeObjectEstimationsError =
  PostApiV1JobsComputeObjectEstimationsErrors[keyof PostApiV1JobsComputeObjectEstimationsErrors];

export type PostApiV1JobsComputeObjectEstimationsResponses = {
  /**
   * Accepted
   */
  202: EstimateObjectCommandResponse;
};

export type PostApiV1JobsComputeObjectEstimationsResponse =
  PostApiV1JobsComputeObjectEstimationsResponses[keyof PostApiV1JobsComputeObjectEstimationsResponses];

export type PostApiV1JobsComputeVariogramEstimationsData = {
  body?: EstimateVariogramCommand;
  path?: never;
  query?: never;
  url: '/api/v1/jobs/compute/variogram-estimations';
};

export type PostApiV1JobsComputeVariogramEstimationsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
};

export type PostApiV1JobsComputeVariogramEstimationsError =
  PostApiV1JobsComputeVariogramEstimationsErrors[keyof PostApiV1JobsComputeVariogramEstimationsErrors];

export type PostApiV1JobsComputeVariogramEstimationsResponses = {
  /**
   * Accepted
   */
  202: EstimateVariogramCommandResponse;
};

export type PostApiV1JobsComputeVariogramEstimationsResponse =
  PostApiV1JobsComputeVariogramEstimationsResponses[keyof PostApiV1JobsComputeVariogramEstimationsResponses];

export type PostApiV1JobsComputeThumbnailGenData = {
  body?: GenerateThumbnailCommand;
  path?: never;
  query?: never;
  url: '/api/v1/jobs/compute/thumbnail-gen';
};

export type PostApiV1JobsComputeThumbnailGenErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
};

export type PostApiV1JobsComputeThumbnailGenError =
  PostApiV1JobsComputeThumbnailGenErrors[keyof PostApiV1JobsComputeThumbnailGenErrors];

export type PostApiV1JobsComputeThumbnailGenResponses = {
  /**
   * Accepted
   */
  202: GenerateThumbnailCommandResponse;
};

export type PostApiV1JobsComputeThumbnailGenResponse =
  PostApiV1JobsComputeThumbnailGenResponses[keyof PostApiV1JobsComputeThumbnailGenResponses];

export type GetApiV1MetadataSmdaMetadataData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/metadata/smda-metadata';
};

export type GetApiV1MetadataSmdaMetadataErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1MetadataSmdaMetadataError =
  GetApiV1MetadataSmdaMetadataErrors[keyof GetApiV1MetadataSmdaMetadataErrors];

export type GetApiV1MetadataSmdaMetadataResponses = {
  /**
   * Success
   */
  200: ListAllQueryResponse;
};

export type GetApiV1MetadataSmdaMetadataResponse =
  GetApiV1MetadataSmdaMetadataResponses[keyof GetApiV1MetadataSmdaMetadataResponses];

export type GetApiV1MetadataSmdaMetadataCountriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/metadata/smda-metadata/countries';
};

export type GetApiV1MetadataSmdaMetadataCountriesErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1MetadataSmdaMetadataCountriesError =
  GetApiV1MetadataSmdaMetadataCountriesErrors[keyof GetApiV1MetadataSmdaMetadataCountriesErrors];

export type GetApiV1MetadataSmdaMetadataCountriesResponses = {
  /**
   * Success
   */
  200: ListCountriesQueryResponse;
};

export type GetApiV1MetadataSmdaMetadataCountriesResponse =
  GetApiV1MetadataSmdaMetadataCountriesResponses[keyof GetApiV1MetadataSmdaMetadataCountriesResponses];

export type GetApiV1MetadataSmdaMetadataFieldsData = {
  body?: never;
  path?: never;
  query?: {
    countryId?: string;
  };
  url: '/api/v1/metadata/smda-metadata/fields';
};

export type GetApiV1MetadataSmdaMetadataFieldsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1MetadataSmdaMetadataFieldsError =
  GetApiV1MetadataSmdaMetadataFieldsErrors[keyof GetApiV1MetadataSmdaMetadataFieldsErrors];

export type GetApiV1MetadataSmdaMetadataFieldsResponses = {
  /**
   * Success
   */
  200: ListFieldsQueryResponse;
};

export type GetApiV1MetadataSmdaMetadataFieldsResponse =
  GetApiV1MetadataSmdaMetadataFieldsResponses[keyof GetApiV1MetadataSmdaMetadataFieldsResponses];

export type GetApiV1MetadataSmdaMetadataStratigraphicColumnsData = {
  body?: never;
  path?: never;
  query?: {
    countryId?: string;
  };
  url: '/api/v1/metadata/smda-metadata/stratigraphic-columns';
};

export type GetApiV1MetadataSmdaMetadataStratigraphicColumnsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1MetadataSmdaMetadataStratigraphicColumnsError =
  GetApiV1MetadataSmdaMetadataStratigraphicColumnsErrors[keyof GetApiV1MetadataSmdaMetadataStratigraphicColumnsErrors];

export type GetApiV1MetadataSmdaMetadataStratigraphicColumnsResponses = {
  /**
   * Success
   */
  200: ListStratColumnQueryResponse;
};

export type GetApiV1MetadataSmdaMetadataStratigraphicColumnsResponse =
  GetApiV1MetadataSmdaMetadataStratigraphicColumnsResponses[keyof GetApiV1MetadataSmdaMetadataStratigraphicColumnsResponses];

export type GetApiV1MetadataSmdaMetadataStratigraphicUnitsData = {
  body?: never;
  path?: never;
  query?: {
    stratUnitParentId?: string;
    stratColumnId?: string;
  };
  url: '/api/v1/metadata/smda-metadata/stratigraphic-units';
};

export type GetApiV1MetadataSmdaMetadataStratigraphicUnitsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1MetadataSmdaMetadataStratigraphicUnitsError =
  GetApiV1MetadataSmdaMetadataStratigraphicUnitsErrors[keyof GetApiV1MetadataSmdaMetadataStratigraphicUnitsErrors];

export type GetApiV1MetadataSmdaMetadataStratigraphicUnitsResponses = {
  /**
   * Success
   */
  200: ListStratUnitsQueryResponse;
};

export type GetApiV1MetadataSmdaMetadataStratigraphicUnitsResponse =
  GetApiV1MetadataSmdaMetadataStratigraphicUnitsResponses[keyof GetApiV1MetadataSmdaMetadataStratigraphicUnitsResponses];

export type GetApiV1MetadataSmdaMetadataGeologyStandardsData = {
  body?: never;
  path?: never;
  query?: {
    parentId?: string;
  };
  url: '/api/v1/metadata/smda-metadata/geology-standards';
};

export type GetApiV1MetadataSmdaMetadataGeologyStandardsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1MetadataSmdaMetadataGeologyStandardsError =
  GetApiV1MetadataSmdaMetadataGeologyStandardsErrors[keyof GetApiV1MetadataSmdaMetadataGeologyStandardsErrors];

export type GetApiV1MetadataSmdaMetadataGeologyStandardsResponses = {
  /**
   * Success
   */
  200: ListGeoStandardsQueryResponse;
};

export type GetApiV1MetadataSmdaMetadataGeologyStandardsResponse =
  GetApiV1MetadataSmdaMetadataGeologyStandardsResponses[keyof GetApiV1MetadataSmdaMetadataGeologyStandardsResponses];

export type GetApiV1ModelareatypeData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/modelareatype';
};

export type GetApiV1ModelareatypeErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1ModelareatypeError =
  GetApiV1ModelareatypeErrors[keyof GetApiV1ModelareatypeErrors];

export type GetApiV1ModelareatypeResponses = {
  /**
   * Success
   */
  200: ListModelAreaTypesQueryResponse;
};

export type GetApiV1ModelareatypeResponse =
  GetApiV1ModelareatypeResponses[keyof GetApiV1ModelareatypeResponses];

export type GetApiV1OutcropsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/outcrops';
};

export type GetApiV1OutcropsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1OutcropsError =
  GetApiV1OutcropsErrors[keyof GetApiV1OutcropsErrors];

export type GetApiV1OutcropsResponses = {
  /**
   * Success
   */
  200: GetOutcropsCommandResponse;
};

export type GetApiV1OutcropsResponse =
  GetApiV1OutcropsResponses[keyof GetApiV1OutcropsResponses];

export type GetApiV1AnalogueModelsByIdResultsObjectData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/results/object';
};

export type GetApiV1AnalogueModelsByIdResultsObjectErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1AnalogueModelsByIdResultsObjectError =
  GetApiV1AnalogueModelsByIdResultsObjectErrors[keyof GetApiV1AnalogueModelsByIdResultsObjectErrors];

export type GetApiV1AnalogueModelsByIdResultsObjectResponses = {
  /**
   * Success
   */
  200: GetObjectResultsByModelIdQueryResponse;
};

export type GetApiV1AnalogueModelsByIdResultsObjectResponse =
  GetApiV1AnalogueModelsByIdResultsObjectResponses[keyof GetApiV1AnalogueModelsByIdResultsObjectResponses];

export type GetApiV1AnalogueModelsByIdResultsVariogramData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/results/variogram';
};

export type GetApiV1AnalogueModelsByIdResultsVariogramErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1AnalogueModelsByIdResultsVariogramError =
  GetApiV1AnalogueModelsByIdResultsVariogramErrors[keyof GetApiV1AnalogueModelsByIdResultsVariogramErrors];

export type GetApiV1AnalogueModelsByIdResultsVariogramResponses = {
  /**
   * Success
   */
  200: GetVariogramResultsByModelIdQueryResponse;
};

export type GetApiV1AnalogueModelsByIdResultsVariogramResponse =
  GetApiV1AnalogueModelsByIdResultsVariogramResponses[keyof GetApiV1AnalogueModelsByIdResultsVariogramResponses];

export type PutApiV1AnalogueModelsByIdResultsObjectByObjectIdData = {
  body?: UpdateObjectResultCommandBody;
  path: {
    id: string;
    objectId: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/results/object/{objectId}';
};

export type PutApiV1AnalogueModelsByIdResultsObjectByObjectIdErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PutApiV1AnalogueModelsByIdResultsObjectByObjectIdError =
  PutApiV1AnalogueModelsByIdResultsObjectByObjectIdErrors[keyof PutApiV1AnalogueModelsByIdResultsObjectByObjectIdErrors];

export type PutApiV1AnalogueModelsByIdResultsObjectByObjectIdResponses = {
  /**
   * Success
   */
  200: UpdateObjectResultCommandResponse;
};

export type PutApiV1AnalogueModelsByIdResultsObjectByObjectIdResponse =
  PutApiV1AnalogueModelsByIdResultsObjectByObjectIdResponses[keyof PutApiV1AnalogueModelsByIdResultsObjectByObjectIdResponses];

export type PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsData = {
  body?: UpdateVariogramResultCommandBody;
  path: {
    id: string;
    computeCaseId: string;
  };
  query?: never;
  url: '/api/v1/analogue-models/{id}/computecases/{computeCaseId}/results';
};

export type PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsErrors =
  {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Forbidden
     */
    403: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
  };

export type PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsError =
  PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsErrors[keyof PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsErrors];

export type PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsResponses =
  {
    /**
     * Success
     */
    200: UpdateVariogramResultCommandResponse;
  };

export type PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsResponse =
  PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsResponses[keyof PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsResponses];

export type GetApiV1UploadsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/uploads';
};

export type GetApiV1UploadsErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1UploadsError =
  GetApiV1UploadsErrors[keyof GetApiV1UploadsErrors];

export type GetApiV1UploadsResponses = {
  /**
   * Success
   */
  200: GetUploadListQueryResponse;
};

export type GetApiV1UploadsResponse =
  GetApiV1UploadsResponses[keyof GetApiV1UploadsResponses];

export type GetApiV1UploadsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/uploads/{id}';
};

export type GetApiV1UploadsByIdErrors = {
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetApiV1UploadsByIdError =
  GetApiV1UploadsByIdErrors[keyof GetApiV1UploadsByIdErrors];

export type GetApiV1UploadsByIdResponses = {
  /**
   * Success
   */
  200: GetUploadDetailQueryResponse;
};

export type GetApiV1UploadsByIdResponse =
  GetApiV1UploadsByIdResponses[keyof GetApiV1UploadsByIdResponses];

export type PostApiV1UploadsModelsData = {
  body?: {
    ModelId: string;
    File: Blob | File;
    FileType: UploadFileType;
  };
  path?: never;
  query?: never;
  url: '/api/v1/uploads/models';
};

export type PostApiV1UploadsModelsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PostApiV1UploadsModelsError =
  PostApiV1UploadsModelsErrors[keyof PostApiV1UploadsModelsErrors];

export type PostApiV1UploadsModelsResponses = {
  /**
   * Success
   */
  200: UploadAnalogueModelCommandResponse;
};

export type PostApiV1UploadsModelsResponse =
  PostApiV1UploadsModelsResponses[keyof PostApiV1UploadsModelsResponses];

export type PostApiV1UploadsModelsManifestData = {
  body?: {
    ModelId: string;
    FileSize: bigint;
    FileName: string;
    FileExtension: string;
    FileType: UploadFileType;
  };
  path?: never;
  query?: never;
  url: '/api/v1/uploads/models/manifest';
};

export type PostApiV1UploadsModelsManifestErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PostApiV1UploadsModelsManifestError =
  PostApiV1UploadsModelsManifestErrors[keyof PostApiV1UploadsModelsManifestErrors];

export type PostApiV1UploadsModelsManifestResponses = {
  /**
   * Success
   */
  200: PrepareChunkedUploadCommandResponse;
};

export type PostApiV1UploadsModelsManifestResponse =
  PostApiV1UploadsModelsManifestResponses[keyof PostApiV1UploadsModelsManifestResponses];

export type PostApiV1UploadsModelsChunksData = {
  body?: {
    ModelId: string;
    UploadId: string;
    Blob: Blob | File;
    ChunkNumber: number;
  };
  path?: never;
  query?: never;
  url: '/api/v1/uploads/models/chunks';
};

export type PostApiV1UploadsModelsChunksErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PostApiV1UploadsModelsChunksError =
  PostApiV1UploadsModelsChunksErrors[keyof PostApiV1UploadsModelsChunksErrors];

export type PostApiV1UploadsModelsChunksResponses = {
  /**
   * Success
   */
  200: UploadChunkCommandResponse;
};

export type PostApiV1UploadsModelsChunksResponse =
  PostApiV1UploadsModelsChunksResponses[keyof PostApiV1UploadsModelsChunksResponses];

export type PostApiV1UploadsModelsCompleteData = {
  body?: {
    ModelId: string;
    UploadId: string;
  };
  path?: never;
  query?: never;
  url: '/api/v1/uploads/models/complete';
};

export type PostApiV1UploadsModelsCompleteErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PostApiV1UploadsModelsCompleteError =
  PostApiV1UploadsModelsCompleteErrors[keyof PostApiV1UploadsModelsCompleteErrors];

export type PostApiV1UploadsModelsCompleteResponses = {
  /**
   * Success
   */
  200: MergeModelCommandResponse;
};

export type PostApiV1UploadsModelsCompleteResponse =
  PostApiV1UploadsModelsCompleteResponses[keyof PostApiV1UploadsModelsCompleteResponses];

export type PostApiV1UploadsModelsByIdIniFileData = {
  body?: {
    File: Blob | File;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/uploads/models/{id}/ini-file';
};

export type PostApiV1UploadsModelsByIdIniFileErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type PostApiV1UploadsModelsByIdIniFileError =
  PostApiV1UploadsModelsByIdIniFileErrors[keyof PostApiV1UploadsModelsByIdIniFileErrors];

export type PostApiV1UploadsModelsByIdIniFileResponses = {
  /**
   * Success
   */
  200: UploadIniFileCommandResponse;
};

export type PostApiV1UploadsModelsByIdIniFileResponse =
  PostApiV1UploadsModelsByIdIniFileResponses[keyof PostApiV1UploadsModelsByIdIniFileResponses];

export type PostApiWebhooksNrresqmlStatusData = {
  body?: UpdateJobStatusCommand;
  headers?: {
    'X-Api-Version'?: string;
  };
  path?: never;
  query?: never;
  url: '/api/webhooks/nrresqml/status';
};

export type PostApiWebhooksNrresqmlStatusErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type PostApiWebhooksNrresqmlStatusError =
  PostApiWebhooksNrresqmlStatusErrors[keyof PostApiWebhooksNrresqmlStatusErrors];

export type PostApiWebhooksNrresqmlStatusResponses = {
  /**
   * Success
   */
  200: UpdateJobStatusCommandResponse;
};

export type PostApiWebhooksNrresqmlStatusResponse =
  PostApiWebhooksNrresqmlStatusResponses[keyof PostApiWebhooksNrresqmlStatusResponses];

export type PostApiWebhooksThumbnailGenStatusData = {
  body?: UpdateThumbnailGenStatusCommand;
  headers?: {
    'X-Api-Version'?: string;
  };
  path?: never;
  query?: never;
  url: '/api/webhooks/thumbnail-gen/status';
};

export type PostApiWebhooksThumbnailGenStatusErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type PostApiWebhooksThumbnailGenStatusError =
  PostApiWebhooksThumbnailGenStatusErrors[keyof PostApiWebhooksThumbnailGenStatusErrors];

export type PostApiWebhooksThumbnailGenStatusResponses = {
  /**
   * Success
   */
  200: UpdateThumbnailGenStatusCommand;
};

export type PostApiWebhooksThumbnailGenStatusResponse =
  PostApiWebhooksThumbnailGenStatusResponses[keyof PostApiWebhooksThumbnailGenStatusResponses];

export type PostApiWebhooksChannestStatusData = {
  body?: UpdateObjectEstimationStatusCommand;
  headers?: {
    'X-Api-Version'?: string;
  };
  path?: never;
  query?: never;
  url: '/api/webhooks/channest/status';
};

export type PostApiWebhooksChannestStatusErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type PostApiWebhooksChannestStatusError =
  PostApiWebhooksChannestStatusErrors[keyof PostApiWebhooksChannestStatusErrors];

export type PostApiWebhooksChannestStatusResponses = {
  /**
   * Success
   */
  200: UpdateObjectEstimationStatusCommandResponse;
};

export type PostApiWebhooksChannestStatusResponse =
  PostApiWebhooksChannestStatusResponses[keyof PostApiWebhooksChannestStatusResponses];

export type PostApiWebhooksVargrestStatusData = {
  body?: UpdateVariogramEstimationStatusCommand;
  headers?: {
    'X-Api-Version'?: string;
  };
  path?: never;
  query?: never;
  url: '/api/webhooks/vargrest/status';
};

export type PostApiWebhooksVargrestStatusErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type PostApiWebhooksVargrestStatusError =
  PostApiWebhooksVargrestStatusErrors[keyof PostApiWebhooksVargrestStatusErrors];

export type PostApiWebhooksVargrestStatusResponses = {
  /**
   * Success
   */
  200: UpdateObjectEstimationStatusCommandResponse;
};

export type PostApiWebhooksVargrestStatusResponse =
  PostApiWebhooksVargrestStatusResponses[keyof PostApiWebhooksVargrestStatusResponses];

export type ClientOptions = {
  baseURL: 'http://localhost:5000' | (string & {});
};
