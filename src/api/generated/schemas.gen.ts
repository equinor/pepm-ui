// This file is auto-generated by @hey-api/openapi-ts

export const AddAnalogueModelAreaCommandFormSchema = {
  required: ['coordinates', 'modelAreaTypeId'],
  type: 'object',
  properties: {
    expand: {
      type: 'string',
      nullable: true,
    },
    isProcessed: {
      type: 'boolean',
      nullable: true,
    },
    stratigraphicGroupsCountryIdentifier: {
      type: 'string',
      nullable: true,
    },
    stratigraphicGroupsFieldIdentifier: {
      type: 'string',
      nullable: true,
    },
    stratigraphicGroupsStratColumnIdentifier: {
      type: 'string',
      nullable: true,
    },
    stratigraphicGroupsStratUnitIdentifier: {
      type: 'string',
      nullable: true,
    },
    outcropsName: {
      type: 'string',
      nullable: true,
    },
    modelAreaTypeId: {
      type: 'string',
      format: 'uuid',
    },
    coordinates: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CoordinateDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const AddAnalogueModelAreaCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/ModelAreaDto',
    },
  },
  additionalProperties: false,
} as const;

export const AddAnalogueModelOutcropFormSchema = {
  type: 'object',
  properties: {
    outcropId: {
      type: 'string',
      format: 'uuid',
    },
  },
  additionalProperties: false,
} as const;

export const AddAnalogueModelOutcropResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/OutcropDto',
    },
  },
  additionalProperties: false,
} as const;

export const AddGeologicalGroupCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/GeologicalGroupDto',
    },
  },
  additionalProperties: false,
} as const;

export const AddGeologicalGroupFormSchema = {
  required: ['architecturalElements', 'depEnvId', 'grossDepEnvId', 'subEnvId'],
  type: 'object',
  properties: {
    grossDepEnvId: {
      type: 'string',
      format: 'uuid',
    },
    depEnvId: {
      type: 'string',
      format: 'uuid',
    },
    subEnvId: {
      type: 'string',
      format: 'uuid',
    },
    architecturalElements: {
      type: 'array',
      items: {
        type: 'string',
        format: 'uuid',
      },
    },
  },
  additionalProperties: false,
} as const;

export const AddStatigraphicGroupFormSchema = {
  required: [
    'countryId',
    'fieldId',
    'stratigraphicColumnId',
    'stratigraphicUnitIds',
  ],
  type: 'object',
  properties: {
    countryId: {
      type: 'string',
      format: 'uuid',
    },
    fieldId: {
      type: 'string',
      format: 'uuid',
    },
    stratigraphicColumnId: {
      type: 'string',
      format: 'uuid',
    },
    stratigraphicUnitIds: {
      type: 'array',
      items: {
        type: 'string',
        format: 'uuid',
      },
    },
  },
  additionalProperties: false,
} as const;

export const AddStratigraphicGroupCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/StratigraphicGroupDto',
    },
  },
  additionalProperties: false,
} as const;

export const AnalogueModelConfigurationDtoSchema = {
  required: ['archels'],
  type: 'object',
  properties: {
    analogueModelConfigurationId: {
      type: 'string',
      format: 'uuid',
    },
    analogueModelId: {
      type: 'string',
      format: 'uuid',
    },
    template: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    simStopTime: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    outputInterval: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    basinSlope: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    channelWidth: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    riverLength: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    riverDischargeIni: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    riverDischargeFin: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    tidalAmplitude: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    waveHeightIni: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    waveHeightFin: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    waveDirection: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    subsidenceLand: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    subsidenceSea: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    composition: {
      $ref: '#/components/schemas/ConfigurationParameterDto',
    },
    archels: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ConfigurationArchelDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const AnalogueModelDetailSchema = {
  required: [
    'analogueModelId',
    'analogueModelImage',
    'description',
    'fileUploads',
    'geologicalGroups',
    'iniParameters',
    'isProcessed',
    'modelAreas',
    'name',
    'outcrops',
    'processingStatus',
    'sourceType',
    'stratigraphicGroups',
  ],
  type: 'object',
  properties: {
    createdBy: {
      type: 'string',
      nullable: true,
    },
    createdDate: {
      type: 'string',
      format: 'date-time',
    },
    lastModifiedBy: {
      type: 'string',
      nullable: true,
    },
    lastModifiedDate: {
      type: 'string',
      format: 'date-time',
    },
    analogueModelId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    description: {
      minLength: 1,
      type: 'string',
    },
    isProcessed: {
      type: 'boolean',
    },
    sourceType: {
      $ref: '#/components/schemas/AnalogueModelSourceType',
    },
    fileUploads: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UploadList',
      },
    },
    modelAreas: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModelAreaDto',
      },
    },
    stratigraphicGroups: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/StratigraphicGroupDto',
      },
    },
    geologicalGroups: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GeologicalGroupDto',
      },
    },
    outcrops: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OutcropDto',
      },
    },
    processingStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
    analogueModelImage: {
      $ref: '#/components/schemas/AnalogueModelImageDto',
    },
    iniParameters: {
      $ref: '#/components/schemas/AnalogueModelConfigurationDto',
    },
  },
  additionalProperties: false,
} as const;

export const AnalogueModelImageDtoSchema = {
  required: ['analogueModelImageId', 'fileName', 'type'],
  type: 'object',
  properties: {
    analogueModelImageId: {
      type: 'string',
      format: 'uuid',
    },
    fileName: {
      minLength: 1,
      type: 'string',
    },
    type: {
      $ref: '#/components/schemas/FileType',
    },
  },
  additionalProperties: false,
} as const;

export const AnalogueModelListSchema = {
  required: [
    'analogueModelId',
    'description',
    'geologicalGroups',
    'iniParameters',
    'isProcessed',
    'modelAreas',
    'name',
    'outcrops',
    'processingStatus',
    'sourceType',
    'stratigraphicGroups',
    'uploads',
  ],
  type: 'object',
  properties: {
    uploads: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UploadList',
      },
    },
    modelAreas: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModelAreaDto',
      },
    },
    stratigraphicGroups: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/StratigraphicGroupDto',
      },
    },
    geologicalGroups: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GeologicalGroupDto',
      },
    },
    outcrops: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OutcropDto',
      },
    },
    iniParameters: {
      $ref: '#/components/schemas/AnalogueModelConfigurationDto',
    },
    analogueModelId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    description: {
      minLength: 1,
      type: 'string',
    },
    isProcessed: {
      type: 'boolean',
    },
    sourceType: {
      $ref: '#/components/schemas/AnalogueModelSourceType',
    },
    processingStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
  },
  additionalProperties: false,
} as const;

export const AnalogueModelSourceTypeSchema = {
  enum: ['Deltares', 'ResQML'],
  type: 'string',
} as const;

export const CancelJobDtoSchema = {
  required: ['jobId', 'jobStatus', 'jobType', 'name'],
  type: 'object',
  properties: {
    jobId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    jobStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
    jobType: {
      $ref: '#/components/schemas/JobType',
    },
  },
  additionalProperties: false,
} as const;

export const ComputeCaseDtoSchema = {
  required: [
    'computeCaseId',
    'computeMethod',
    'computeType',
    'inputSettings',
    'jobStatus',
    'modelArea',
  ],
  type: 'object',
  properties: {
    computeCaseId: {
      type: 'string',
      format: 'uuid',
    },
    modelArea: {
      $ref: '#/components/schemas/ComputeCaseModelAreaDto',
    },
    computeMethod: {
      $ref: '#/components/schemas/ComputeMethod',
    },
    computeType: {
      $ref: '#/components/schemas/ComputeType',
    },
    inputSettings: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ComputeCaseInputSettingsDto',
      },
    },
    jobStatus: {
      $ref: '#/components/schemas/ComputeJobStatus',
    },
  },
  additionalProperties: false,
} as const;

export const ComputeCaseInputSettingsDtoSchema = {
  required: [
    'computeCaseId',
    'computeMethod',
    'computeSettingId',
    'computeType',
    'inputValueType',
    'name',
    'value',
  ],
  type: 'object',
  properties: {
    value: {
      minLength: 1,
      type: 'string',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    computeType: {
      minLength: 1,
      type: 'string',
    },
    computeMethod: {
      minLength: 1,
      type: 'string',
    },
    inputValueType: {
      minLength: 1,
      type: 'string',
    },
    computeCaseId: {
      type: 'string',
      format: 'uuid',
    },
    computeSettingId: {
      type: 'string',
      format: 'uuid',
    },
  },
  additionalProperties: false,
} as const;

export const ComputeCaseModelAreaDtoSchema = {
  required: ['modelAreaId', 'name'],
  type: 'object',
  properties: {
    modelAreaId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const ComputeJobStatusSchema = {
  enum: ['NotStarted', 'Created', 'Waiting', 'Running', 'Succeeded', 'Failed'],
  type: 'string',
} as const;

export const ComputeMethodSchema = {
  enum: [
    'NetToGross',
    'Indicator',
    'ContiniousParameter',
    'Mouthbar',
    'Channel',
  ],
  type: 'string',
} as const;

export const ComputeTypeSchema = {
  enum: ['Variogram', 'Object'],
  type: 'string',
} as const;

export const ConfigurationArchelDtoSchema = {
  type: 'object',
  properties: {
    analogueModelConfigurationArchelId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
      nullable: true,
    },
    value: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ConfigurationParameterDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    value: {
      type: 'string',
      nullable: true,
    },
    description: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ConvertAnalogueModelCommandSchema = {
  required: ['modelId'],
  type: 'object',
  properties: {
    modelId: {
      type: 'string',
      format: 'uuid',
    },
  },
  additionalProperties: false,
} as const;

export const ConvertAnalogueModelCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/ConvertAnalogueModelDto',
    },
  },
  additionalProperties: false,
} as const;

export const ConvertAnalogueModelDtoSchema = {
  required: ['jobId', 'jobStatus', 'jobType', 'name'],
  type: 'object',
  properties: {
    jobId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    jobStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
    jobType: {
      $ref: '#/components/schemas/JobType',
    },
  },
  additionalProperties: false,
} as const;

export const CoordinateDtoSchema = {
  required: ['m', 'x', 'y'],
  type: 'object',
  properties: {
    x: {
      type: 'number',
      format: 'double',
    },
    y: {
      type: 'number',
      format: 'double',
    },
    m: {
      type: 'number',
      format: 'double',
    },
  },
  additionalProperties: false,
} as const;

export const CountryDtoSchema = {
  required: ['countryId', 'identifier'],
  type: 'object',
  properties: {
    countryId: {
      type: 'string',
      format: 'uuid',
    },
    identifier: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const CreateAnalogueModelCommandSchema = {
  required: ['name', 'sourceType'],
  type: 'object',
  properties: {
    name: {
      minLength: 1,
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    sourceType: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const CreateAnalogueModelCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/CreateAnalogueModelDto',
    },
  },
  additionalProperties: false,
} as const;

export const CreateAnalogueModelDtoSchema = {
  required: ['analogueModelId', 'name'],
  type: 'object',
  properties: {
    analogueModelId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const CreateComputeCaseCommandFormSchema = {
  required: ['computeMethod', 'computeType', 'inputSettings'],
  type: 'object',
  properties: {
    modelAreaId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    computeType: {
      $ref: '#/components/schemas/ComputeType',
    },
    computeMethod: {
      $ref: '#/components/schemas/ComputeMethod',
    },
    inputSettings: {
      type: 'array',
      items: {
        type: 'string',
        format: 'uuid',
      },
    },
  },
  additionalProperties: false,
} as const;

export const CreateComputeCaseCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/ComputeCaseDto',
    },
  },
  additionalProperties: false,
} as const;

export const DeleteGeologicalGroupCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'string',
      format: 'uuid',
    },
  },
  additionalProperties: false,
} as const;

export const DeleteOutcropResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'string',
      format: 'uuid',
    },
  },
  additionalProperties: false,
} as const;

export const DeleteStratigraphicGroupCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'string',
      format: 'uuid',
    },
  },
  additionalProperties: false,
} as const;

export const ErrorResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const EstimateObjectCommandSchema = {
  required: ['computeCaseId', 'modelId'],
  type: 'object',
  properties: {
    modelId: {
      type: 'string',
      format: 'uuid',
    },
    computeCaseId: {
      type: 'string',
      format: 'uuid',
    },
  },
  additionalProperties: false,
} as const;

export const EstimateObjectCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/EstimateObjectDto',
    },
  },
  additionalProperties: false,
} as const;

export const EstimateObjectDtoSchema = {
  required: ['jobId', 'jobStatus', 'jobType', 'name'],
  type: 'object',
  properties: {
    jobId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    jobStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
    jobType: {
      $ref: '#/components/schemas/JobType',
    },
  },
  additionalProperties: false,
} as const;

export const EstimateVariogramCommandSchema = {
  required: ['computeCaseId', 'modelId'],
  type: 'object',
  properties: {
    modelId: {
      type: 'string',
      format: 'uuid',
    },
    computeCaseId: {
      type: 'string',
      format: 'uuid',
    },
  },
  additionalProperties: false,
} as const;

export const EstimateVariogramCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/EstimateVariogramDto',
    },
  },
  additionalProperties: false,
} as const;

export const EstimateVariogramDtoSchema = {
  required: ['jobId', 'jobStatus', 'jobType', 'name'],
  type: 'object',
  properties: {
    jobId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    jobStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
    jobType: {
      $ref: '#/components/schemas/JobType',
    },
  },
  additionalProperties: false,
} as const;

export const FieldDtoSchema = {
  required: ['countryId', 'fieldId', 'identifier'],
  type: 'object',
  properties: {
    fieldId: {
      type: 'string',
      format: 'uuid',
    },
    identifier: {
      minLength: 1,
      type: 'string',
    },
    countryId: {
      type: 'string',
      format: 'uuid',
    },
  },
  additionalProperties: false,
} as const;

export const FileSchema = {
  type: 'object',
  additionalProperties: false,
} as const;

export const FileTypeSchema = {
  enum: ['JPG', 'PNG', 'CSV'],
  type: 'string',
} as const;

export const GenerateThumbnailCommandSchema = {
  required: ['modelId'],
  type: 'object',
  properties: {
    modelId: {
      type: 'string',
      format: 'uuid',
    },
  },
  additionalProperties: false,
} as const;

export const GenerateThumbnailCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/GenerateThumbnailDto',
    },
  },
  additionalProperties: false,
} as const;

export const GenerateThumbnailDtoSchema = {
  required: ['jobId', 'jobStatus', 'jobType', 'name'],
  type: 'object',
  properties: {
    jobId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    jobStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
    jobType: {
      $ref: '#/components/schemas/JobType',
    },
  },
  additionalProperties: false,
} as const;

export const GeologicalGroupDtoSchema = {
  required: [
    'architecturalElements',
    'depEnv',
    'geologicalGroupId',
    'grossDepEnv',
    'subenv',
  ],
  type: 'object',
  properties: {
    geologicalGroupId: {
      type: 'string',
      format: 'uuid',
    },
    grossDepEnv: {
      $ref: '#/components/schemas/GeologicalStandardDto',
    },
    depEnv: {
      $ref: '#/components/schemas/GeologicalStandardDto',
    },
    subenv: {
      $ref: '#/components/schemas/GeologicalStandardDto',
    },
    architecturalElements: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GeologicalStandardDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const GeologicalStandardDtoSchema = {
  required: [
    'equinorCode',
    'geologicalStandardId',
    'geologyGroup',
    'identifier',
  ],
  type: 'object',
  properties: {
    geologicalStandardId: {
      type: 'string',
      format: 'uuid',
    },
    identifier: {
      minLength: 1,
      type: 'string',
    },
    geologicalStandardParentId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    geologyGroup: {
      minLength: 1,
      type: 'string',
    },
    equinorCode: {
      type: 'integer',
      format: 'int32',
    },
  },
  additionalProperties: false,
} as const;

export const GetAnalogueModelListQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AnalogueModelList',
      },
    },
  },
  additionalProperties: false,
} as const;

export const GetAnalogueModelQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/AnalogueModelDetail',
    },
  },
  additionalProperties: false,
} as const;

export const GetCurrentJobStatusCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/GetCurrentJobStatusDto',
    },
  },
  additionalProperties: false,
} as const;

export const GetCurrentJobStatusDtoSchema = {
  required: ['jobId', 'jobStatus', 'jobType', 'name'],
  type: 'object',
  properties: {
    jobId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    jobStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
    jobType: {
      $ref: '#/components/schemas/JobType',
    },
  },
  additionalProperties: false,
} as const;

export const GetCurrentJobStatusListCommandSchema = {
  type: 'object',
  additionalProperties: false,
} as const;

export const GetImageMetadataCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/ImageMetadataDto',
    },
  },
  additionalProperties: false,
} as const;

export const GetJobDetailQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/JobDetail',
    },
  },
  additionalProperties: false,
} as const;

export const GetJobListQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobList',
      },
    },
  },
  additionalProperties: false,
} as const;

export const GetObjectResultsByModelIdQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GetObjectResultsDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const GetObjectResultsDtoSchema = {
  required: [
    'box',
    'computeCaseId',
    'height',
    'length',
    'objectResultFiles',
    'objectResultId',
    'segmentHeight',
    'segmentWidth',
    'status',
    'type',
    'width',
  ],
  type: 'object',
  properties: {
    objectResultId: {
      type: 'string',
      format: 'uuid',
    },
    computeCaseId: {
      type: 'string',
      format: 'uuid',
    },
    type: {
      $ref: '#/components/schemas/ComputeType',
    },
    status: {
      $ref: '#/components/schemas/ResultStatus',
    },
    objectResultFiles: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GetObjectResultsFileDto',
      },
    },
    segmentWidth: {
      $ref: '#/components/schemas/ObjectEstimationResultDto',
    },
    width: {
      $ref: '#/components/schemas/ObjectEstimationResultDto',
    },
    length: {
      $ref: '#/components/schemas/ObjectEstimationResultDto',
    },
    segmentHeight: {
      $ref: '#/components/schemas/ObjectEstimationResultDto',
    },
    height: {
      $ref: '#/components/schemas/ObjectHeightDto',
    },
    box: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CoordinateDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const GetObjectResultsFileDtoSchema = {
  required: ['fileName', 'objectResultFileId'],
  type: 'object',
  properties: {
    fileName: {
      minLength: 1,
      type: 'string',
    },
    objectResultFileId: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const GetOutcropsCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GetOutcropsDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const GetOutcropsDtoSchema = {
  required: ['basins', 'name', 'outcropCategory', 'outcropId', 'region'],
  type: 'object',
  properties: {
    outcropId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    outcropCategory: {
      minLength: 1,
      type: 'string',
    },
    basins: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    region: {
      $ref: '#/components/schemas/GetOutcropsRegionDto',
    },
  },
  additionalProperties: false,
} as const;

export const GetOutcropsLocationDtoSchema = {
  required: ['country', 'locationId', 'locationName', 'regionId'],
  type: 'object',
  properties: {
    locationId: {
      type: 'string',
      format: 'uuid',
    },
    regionId: {
      type: 'string',
      format: 'uuid',
    },
    locationName: {
      minLength: 1,
      type: 'string',
    },
    country: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const GetOutcropsRegionDtoSchema = {
  required: ['locations', 'name', 'regionId'],
  type: 'object',
  properties: {
    regionId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    locations: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GetOutcropsLocationDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const GetUploadDetailQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/UploadDetail',
    },
  },
  additionalProperties: false,
} as const;

export const GetUploadListQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UploadList',
      },
    },
  },
  additionalProperties: false,
} as const;

export const GetVariogramResultsByModelIdQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GetVariogramResultsDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const GetVariogramResultsDtoSchema = {
  required: [
    'azimuth',
    'box',
    'computeCaseId',
    'family',
    'identifier',
    'quality',
    'qualityX',
    'qualityY',
    'qualityZ',
    'rmajor',
    'rminor',
    'rvertical',
    'sigma',
    'status',
    'variogramResultFiles',
    'variogramResultId',
  ],
  type: 'object',
  properties: {
    computeCaseId: {
      type: 'string',
      format: 'uuid',
    },
    variogramResultId: {
      type: 'string',
      format: 'uuid',
    },
    identifier: {
      type: 'integer',
      format: 'int32',
    },
    status: {
      $ref: '#/components/schemas/ResultStatus',
    },
    variogramResultFiles: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GetVariogramResultsVariogramResultFileDto',
      },
    },
    rmajor: {
      type: 'number',
      format: 'double',
    },
    rminor: {
      type: 'number',
      format: 'double',
    },
    azimuth: {
      type: 'number',
      format: 'double',
    },
    rvertical: {
      type: 'number',
      format: 'double',
    },
    sigma: {
      type: 'number',
      format: 'double',
    },
    quality: {
      type: 'number',
      format: 'double',
    },
    qualityX: {
      type: 'number',
      format: 'double',
    },
    qualityY: {
      type: 'number',
      format: 'double',
    },
    qualityZ: {
      type: 'number',
      format: 'double',
    },
    family: {
      minLength: 1,
      type: 'string',
    },
    archelFilter: {
      type: 'string',
      nullable: true,
    },
    indicator: {
      type: 'string',
      nullable: true,
    },
    customIndicator: {
      type: 'string',
      nullable: true,
    },
    attribute: {
      type: 'string',
      nullable: true,
    },
    box: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CoordinateDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const GetVariogramResultsVariogramResultFileDtoSchema = {
  required: ['fileName', 'variogramResultFileId'],
  type: 'object',
  properties: {
    fileName: {
      minLength: 1,
      type: 'string',
    },
    variogramResultFileId: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const ImageMetadataDtoSchema = {
  required: ['boundingBox', 'colorLegend', 'modelName'],
  type: 'object',
  properties: {
    modelName: {
      minLength: 1,
      type: 'string',
    },
    boundingBox: {
      $ref: '#/components/schemas/ThumbnailBoundingBoxDto',
    },
    colorLegend: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
    },
  },
  additionalProperties: false,
} as const;

export const InputValueTypeSchema = {
  enum: [
    'Indicator',
    'NetToGross',
    'VariogramFamilyFilter',
    'AttributeName',
    'Archel',
  ],
  type: 'string',
} as const;

export const JobDetailSchema = {
  type: 'object',
  properties: {
    jobId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
      nullable: true,
    },
    jobStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
    jobType: {
      $ref: '#/components/schemas/JobType',
    },
  },
  additionalProperties: false,
} as const;

export const JobListSchema = {
  required: ['jobId', 'jobStatus', 'jobType', 'name', 'updated'],
  type: 'object',
  properties: {
    jobId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    jobStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
    jobType: {
      $ref: '#/components/schemas/JobType',
    },
    updated: {
      type: 'string',
      format: 'date-time',
    },
    uploads: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobListUploadsDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const JobListUploadsDtoSchema = {
  required: ['uploadFileType', 'uploadId', 'uploadStatus'],
  type: 'object',
  properties: {
    uploadId: {
      type: 'string',
      format: 'uuid',
    },
    uploadStatus: {
      $ref: '#/components/schemas/UploadStatus',
    },
    uploadFileType: {
      $ref: '#/components/schemas/UploadFileType',
    },
  },
  additionalProperties: false,
} as const;

export const JobStatusSchema = {
  enum: ['Unknown', 'Created', 'Waiting', 'Running', 'Succeeded', 'Failed'],
  type: 'string',
} as const;

export const JobTypeSchema = {
  enum: ['Nrresqml', 'Nrchannel', 'Nrvariogram', 'NrthumbnailGen'],
  type: 'string',
} as const;

export const ListAllQueryResponseSchema = {
  required: [
    'countries',
    'fields',
    'geologicalStandards',
    'stratColumns',
    'stratUnits',
  ],
  type: 'object',
  properties: {
    countries: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CountryDto',
      },
    },
    fields: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FieldDto',
      },
    },
    stratUnits: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/StratUnitDto',
      },
    },
    stratColumns: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/StratColumnDto',
      },
    },
    geologicalStandards: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GeologicalStandardDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const ListComputeCasesByAnalogueModelIdQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ComputeCaseDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const ListComputeSettingsMethodDtoSchema = {
  type: 'object',
  properties: {
    objectComputeSettings: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ListComputeSettingsModelDto',
      },
      nullable: true,
    },
    variogramComputeSettings: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ListComputeSettingsModelDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ListComputeSettingsModelDtoSchema = {
  type: 'object',
  properties: {
    computeSettingId: {
      type: 'string',
      format: 'uuid',
    },
    computeType: {
      $ref: '#/components/schemas/ComputeType',
    },
    computeMethod: {
      $ref: '#/components/schemas/ComputeMethod',
    },
    inputValueType: {
      $ref: '#/components/schemas/InputValueType',
    },
    value: {
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ListComputeSettingsQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/ListComputeSettingsMethodDto',
    },
  },
  additionalProperties: false,
} as const;

export const ListCountriesQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CountryDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const ListFieldsQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FieldDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const ListGeoStandardsQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GeologicalStandardDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const ListModelAreaTypesQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModelAreaTypeDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const ListStratColumnQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/StratColumnDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const ListStratUnitsQueryResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/StratUnitDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const LocationDtoSchema = {
  required: ['country', 'locationId', 'locationName', 'regionId'],
  type: 'object',
  properties: {
    locationId: {
      type: 'string',
      format: 'uuid',
    },
    regionId: {
      type: 'string',
      format: 'uuid',
    },
    locationName: {
      minLength: 1,
      type: 'string',
    },
    country: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const MergeModelCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/MergeModelDto',
    },
  },
  additionalProperties: false,
} as const;

export const MergeModelDtoSchema = {
  required: [
    'originalFileName',
    'uploadFileCategory',
    'uploadFileType',
    'uploadId',
    'uploadStatus',
  ],
  type: 'object',
  properties: {
    uploadId: {
      type: 'string',
      format: 'uuid',
    },
    originalFileName: {
      minLength: 1,
      type: 'string',
    },
    uploadStatus: {
      $ref: '#/components/schemas/UploadStatus',
    },
    uploadFileType: {
      $ref: '#/components/schemas/UploadFileType',
    },
    uploadFileCategory: {
      $ref: '#/components/schemas/UploadFileCategory',
    },
  },
  additionalProperties: false,
} as const;

export const ModelAreaDtoSchema = {
  required: ['coordinates', 'modelAreaId', 'modelAreaType'],
  type: 'object',
  properties: {
    modelAreaId: {
      type: 'string',
      format: 'uuid',
    },
    modelAreaType: {
      minLength: 1,
      type: 'string',
    },
    coordinates: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CoordinateDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const ModelAreaTypeDtoSchema = {
  required: ['description', 'modelAreaTypeId', 'name'],
  type: 'object',
  properties: {
    modelAreaTypeId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    description: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const ObjectEstimationResultDtoSchema = {
  required: [
    'coefficentOfVariation',
    'count',
    'max',
    'mean',
    'meanEstimateStandardError',
    'min',
    'percentiles',
    'sd',
  ],
  type: 'object',
  properties: {
    mean: {
      type: 'number',
      format: 'double',
    },
    sd: {
      type: 'number',
      format: 'double',
    },
    count: {
      type: 'number',
      format: 'double',
    },
    coefficentOfVariation: {
      type: 'number',
      format: 'double',
    },
    meanEstimateStandardError: {
      type: 'number',
      format: 'double',
    },
    min: {
      type: 'number',
      format: 'double',
    },
    max: {
      type: 'number',
      format: 'double',
    },
    percentiles: {
      $ref: '#/components/schemas/PercentilesDto',
    },
  },
  additionalProperties: false,
} as const;

export const ObjectHeightDtoSchema = {
  required: [
    'coefficentOfVariation',
    'count',
    'max',
    'mean',
    'meanEstimateStandardError',
    'min',
    'modeMean',
    'modeSd',
    'percentiles',
    'sd',
  ],
  type: 'object',
  properties: {
    mean: {
      type: 'number',
      format: 'double',
    },
    sd: {
      type: 'number',
      format: 'double',
    },
    count: {
      type: 'number',
      format: 'double',
    },
    coefficentOfVariation: {
      type: 'number',
      format: 'double',
    },
    meanEstimateStandardError: {
      type: 'number',
      format: 'double',
    },
    min: {
      type: 'number',
      format: 'double',
    },
    max: {
      type: 'number',
      format: 'double',
    },
    percentiles: {
      $ref: '#/components/schemas/PercentilesDto',
    },
    modeSd: {
      type: 'number',
      format: 'double',
    },
    modeMean: {
      type: 'number',
      format: 'double',
    },
  },
  additionalProperties: false,
} as const;

export const OperationSchema = {
  type: 'object',
  properties: {
    operationType: {
      $ref: '#/components/schemas/OperationType',
    },
    path: {
      type: 'string',
      nullable: true,
    },
    op: {
      type: 'string',
      nullable: true,
    },
    from: {
      type: 'string',
      nullable: true,
    },
    value: {
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const OperationTypeSchema = {
  enum: ['Add', 'Remove', 'Replace', 'Move', 'Copy', 'Test', 'Invalid'],
  type: 'string',
} as const;

export const OutcropDtoSchema = {
  required: ['basins', 'name', 'outcropCategory', 'outcropId', 'region'],
  type: 'object',
  properties: {
    outcropId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    outcropCategory: {
      minLength: 1,
      type: 'string',
    },
    basins: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    region: {
      $ref: '#/components/schemas/RegionDto',
    },
  },
  additionalProperties: false,
} as const;

export const PatchAnalogueModelCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/PatchAnalogueModelDto',
    },
  },
  additionalProperties: false,
} as const;

export const PatchAnalogueModelDtoSchema = {
  required: ['analogueModelId', 'name'],
  type: 'object',
  properties: {
    analogueModelId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const PercentilesDtoSchema = {
  required: ['p10', 'p20', 'p30', 'p40', 'p50', 'p60', 'p70', 'p80', 'p90'],
  type: 'object',
  properties: {
    p10: {
      type: 'number',
      format: 'double',
    },
    p20: {
      type: 'number',
      format: 'double',
    },
    p30: {
      type: 'number',
      format: 'double',
    },
    p40: {
      type: 'number',
      format: 'double',
    },
    p50: {
      type: 'number',
      format: 'double',
    },
    p60: {
      type: 'number',
      format: 'double',
    },
    p70: {
      type: 'number',
      format: 'double',
    },
    p80: {
      type: 'number',
      format: 'double',
    },
    p90: {
      type: 'number',
      format: 'double',
    },
  },
  additionalProperties: false,
} as const;

export const PostCancelJobCommandSchema = {
  required: ['computeCaseId', 'modelId'],
  type: 'object',
  properties: {
    modelId: {
      type: 'string',
      format: 'uuid',
    },
    computeCaseId: {
      type: 'string',
      format: 'uuid',
    },
  },
  additionalProperties: false,
} as const;

export const PostCancelJobCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/CancelJobDto',
    },
  },
  additionalProperties: false,
} as const;

export const PrepareChunkedUploadCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/PrepareChunkedUploadDto',
    },
  },
  additionalProperties: false,
} as const;

export const PrepareChunkedUploadDtoSchema = {
  required: ['fileSize', 'numChunks', 'uploadId'],
  type: 'object',
  properties: {
    uploadId: {
      type: 'string',
      format: 'uuid',
    },
    numChunks: {
      type: 'integer',
      format: 'int32',
    },
    fileSize: {
      type: 'integer',
      format: 'int64',
    },
  },
  additionalProperties: false,
} as const;

export const ProblemDetailsSchema = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      nullable: true,
    },
    title: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    detail: {
      type: 'string',
      nullable: true,
    },
    instance: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: {},
} as const;

export const RadixJobDtoSchema = {
  type: 'object',
  properties: {
    jobId: {
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const RegionDtoSchema = {
  required: ['locations', 'name', 'regionId'],
  type: 'object',
  properties: {
    regionId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    locations: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/LocationDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const ResultStatusSchema = {
  enum: ['Draft', 'Publish'],
  type: 'string',
} as const;

export const StratColumnDtoSchema = {
  required: ['countries', 'identifier', 'stratColumnId'],
  type: 'object',
  properties: {
    stratColumnId: {
      type: 'string',
      format: 'uuid',
    },
    identifier: {
      minLength: 1,
      type: 'string',
    },
    countries: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CountryDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const StratUnitDtoSchema = {
  required: [
    'identifier',
    'level',
    'stratColumnId',
    'stratUnitId',
    'stratUnitType',
  ],
  type: 'object',
  properties: {
    stratUnitId: {
      type: 'string',
      format: 'uuid',
    },
    identifier: {
      minLength: 1,
      type: 'string',
    },
    stratColumnId: {
      type: 'string',
      format: 'uuid',
    },
    stratUnitParentId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    level: {
      type: 'integer',
      format: 'int32',
    },
    stratUnitType: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const StratigraphicGroupDtoSchema = {
  required: [
    'country',
    'field',
    'stratColumn',
    'stratigraphicGroupId',
    'stratUnits',
  ],
  type: 'object',
  properties: {
    stratigraphicGroupId: {
      type: 'string',
      format: 'uuid',
    },
    country: {
      $ref: '#/components/schemas/CountryDto',
    },
    field: {
      $ref: '#/components/schemas/FieldDto',
    },
    stratColumn: {
      $ref: '#/components/schemas/StratColumnDto',
    },
    stratUnits: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/StratUnitDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const ThumbnailBoundingBoxDtoSchema = {
  required: ['x0', 'x1', 'y0', 'y1'],
  type: 'object',
  properties: {
    x0: {
      type: 'number',
      format: 'double',
    },
    y0: {
      type: 'number',
      format: 'double',
    },
    x1: {
      type: 'number',
      format: 'double',
    },
    y1: {
      type: 'number',
      format: 'double',
    },
  },
  additionalProperties: false,
} as const;

export const UpdateAnalogueModelAreaCommandFormSchema = {
  required: ['coordinates'],
  type: 'object',
  properties: {
    coordinates: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CoordinateDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const UpdateAnalogueModelCommandBodySchema = {
  required: ['name', 'sourceType'],
  type: 'object',
  properties: {
    name: {
      minLength: 1,
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    sourceType: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const UpdateAnalogueModelCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/UpdateAnalogueModelDto',
    },
  },
  additionalProperties: false,
} as const;

export const UpdateAnalogueModelDtoSchema = {
  required: ['analogueModelId', 'name', 'sourceType'],
  type: 'object',
  properties: {
    analogueModelId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    sourceType: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const UpdateComputeCaseCommandFormSchema = {
  required: ['inputSettings'],
  type: 'object',
  properties: {
    expand: {
      type: 'string',
      nullable: true,
    },
    isProcessed: {
      type: 'boolean',
      nullable: true,
    },
    stratigraphicGroupsCountryIdentifier: {
      type: 'string',
      nullable: true,
    },
    stratigraphicGroupsFieldIdentifier: {
      type: 'string',
      nullable: true,
    },
    stratigraphicGroupsStratColumnIdentifier: {
      type: 'string',
      nullable: true,
    },
    stratigraphicGroupsStratUnitIdentifier: {
      type: 'string',
      nullable: true,
    },
    outcropsName: {
      type: 'string',
      nullable: true,
    },
    modelAreaId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    inputSettings: {
      type: 'array',
      items: {
        type: 'string',
        format: 'uuid',
      },
    },
  },
  additionalProperties: false,
} as const;

export const UpdateJobStatusCommandSchema = {
  required: ['name', 'status'],
  type: 'object',
  properties: {
    name: {
      minLength: 1,
      type: 'string',
    },
    started: {
      type: 'string',
      nullable: true,
    },
    ended: {
      type: 'string',
      nullable: true,
    },
    status: {
      minLength: 1,
      type: 'string',
    },
    jobStatuses: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/RadixJobDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UpdateJobStatusCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateJobStatusDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const UpdateJobStatusDtoSchema = {
  required: ['jobId', 'jobStatus', 'jobType', 'name'],
  type: 'object',
  properties: {
    jobId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    jobStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
    jobType: {
      $ref: '#/components/schemas/JobType',
    },
  },
  additionalProperties: false,
} as const;

export const UpdateObjectEstimationStatusCommandSchema = {
  required: ['name', 'status'],
  type: 'object',
  properties: {
    name: {
      minLength: 1,
      type: 'string',
    },
    started: {
      type: 'string',
      nullable: true,
    },
    ended: {
      type: 'string',
      nullable: true,
    },
    status: {
      minLength: 1,
      type: 'string',
    },
    jobStatuses: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/RadixJobDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UpdateObjectEstimationStatusCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateObjectEstimationStatusDto',
      },
    },
  },
  additionalProperties: false,
} as const;

export const UpdateObjectEstimationStatusDtoSchema = {
  required: ['jobId', 'jobStatus', 'jobType', 'name'],
  type: 'object',
  properties: {
    jobId: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      minLength: 1,
      type: 'string',
    },
    jobStatus: {
      $ref: '#/components/schemas/JobStatus',
    },
    jobType: {
      $ref: '#/components/schemas/JobType',
    },
  },
  additionalProperties: false,
} as const;

export const UpdateObjectResultCommandBodySchema = {
  required: ['status'],
  type: 'object',
  properties: {
    status: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const UpdateObjectResultCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/UpdateObjectResultDto',
    },
  },
  additionalProperties: false,
} as const;

export const UpdateObjectResultDtoSchema = {
  required: ['analogueModelId', 'objectResultId', 'status'],
  type: 'object',
  properties: {
    analogueModelId: {
      type: 'string',
      format: 'uuid',
    },
    objectResultId: {
      type: 'string',
      format: 'uuid',
    },
    status: {
      $ref: '#/components/schemas/ResultStatus',
    },
  },
  additionalProperties: false,
} as const;

export const UpdateThumbnailGenStatusCommandSchema = {
  required: ['name', 'status'],
  type: 'object',
  properties: {
    name: {
      minLength: 1,
      type: 'string',
    },
    started: {
      type: 'string',
      nullable: true,
    },
    ended: {
      type: 'string',
      nullable: true,
    },
    status: {
      minLength: 1,
      type: 'string',
    },
    jobStatuses: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/RadixJobDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UpdateVariogramEstimationStatusCommandSchema = {
  required: ['name', 'status'],
  type: 'object',
  properties: {
    name: {
      minLength: 1,
      type: 'string',
    },
    started: {
      type: 'string',
      nullable: true,
    },
    ended: {
      type: 'string',
      nullable: true,
    },
    status: {
      minLength: 1,
      type: 'string',
    },
    jobStatuses: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/RadixJobDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const UpdateVariogramResultCommandBodySchema = {
  required: ['identifier', 'status'],
  type: 'object',
  properties: {
    status: {
      minLength: 1,
      type: 'string',
    },
    identifier: {
      type: 'integer',
      format: 'int32',
    },
  },
  additionalProperties: false,
} as const;

export const UpdateVariogramResultCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/UpdateVariogramResultDto',
    },
  },
  additionalProperties: false,
} as const;

export const UpdateVariogramResultDtoSchema = {
  required: ['analogueModelId', 'computeCaseId', 'identifier', 'status'],
  type: 'object',
  properties: {
    analogueModelId: {
      type: 'string',
      format: 'uuid',
    },
    computeCaseId: {
      type: 'string',
      format: 'uuid',
    },
    status: {
      $ref: '#/components/schemas/ResultStatus',
    },
    identifier: {
      type: 'integer',
      format: 'int32',
    },
  },
  additionalProperties: false,
} as const;

export const UploadAnalogueModelCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/UploadAnalogueModelDto',
    },
  },
  additionalProperties: false,
} as const;

export const UploadAnalogueModelDtoSchema = {
  required: [
    'originalFileName',
    'uploadFileCategory',
    'uploadFileType',
    'uploadId',
    'uploadStatus',
  ],
  type: 'object',
  properties: {
    uploadId: {
      type: 'string',
      format: 'uuid',
    },
    originalFileName: {
      minLength: 1,
      type: 'string',
    },
    uploadStatus: {
      $ref: '#/components/schemas/UploadStatus',
    },
    uploadFileType: {
      $ref: '#/components/schemas/UploadFileType',
    },
    uploadFileCategory: {
      $ref: '#/components/schemas/UploadFileCategory',
    },
  },
  additionalProperties: false,
} as const;

export const UploadChunkCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const;

export const UploadDetailSchema = {
  required: [
    'originalFileName',
    'uploadFileCategory',
    'uploadFileType',
    'uploadId',
    'uploadStatus',
  ],
  type: 'object',
  properties: {
    uploadId: {
      type: 'string',
      format: 'uuid',
    },
    originalFileName: {
      minLength: 1,
      type: 'string',
    },
    uploadStatus: {
      $ref: '#/components/schemas/UploadStatus',
    },
    uploadFileType: {
      $ref: '#/components/schemas/UploadFileType',
    },
    uploadFileCategory: {
      $ref: '#/components/schemas/UploadFileCategory',
    },
  },
  additionalProperties: false,
} as const;

export const UploadFileCategorySchema = {
  enum: ['InputModel', 'InputMetadata', 'ResQmlModel'],
  type: 'string',
} as const;

export const UploadFileTypeSchema = {
  enum: ['NetCDF', 'ResQMLEpc', 'ResQMLData', 'IniData'],
  type: 'string',
} as const;

export const UploadIniFileCommandResponseSchema = {
  required: ['data'],
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    count: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    data: {
      $ref: '#/components/schemas/UploadIniFileDto',
    },
  },
  additionalProperties: false,
} as const;

export const UploadIniFileDtoSchema = {
  required: [
    'originalFileName',
    'uploadFileCategory',
    'uploadFileType',
    'uploadId',
    'uploadStatus',
  ],
  type: 'object',
  properties: {
    uploadId: {
      type: 'string',
      format: 'uuid',
    },
    originalFileName: {
      minLength: 1,
      type: 'string',
    },
    uploadStatus: {
      $ref: '#/components/schemas/UploadStatus',
    },
    uploadFileType: {
      $ref: '#/components/schemas/UploadFileType',
    },
    uploadFileCategory: {
      $ref: '#/components/schemas/UploadFileCategory',
    },
  },
  additionalProperties: false,
} as const;

export const UploadListSchema = {
  required: [
    'analogueModelId',
    'originalFileName',
    'uploadFileCategory',
    'uploadFileType',
    'uploadId',
    'uploadStatus',
  ],
  type: 'object',
  properties: {
    uploadId: {
      type: 'string',
      format: 'uuid',
    },
    analogueModelId: {
      type: 'string',
      format: 'uuid',
    },
    originalFileName: {
      minLength: 1,
      type: 'string',
    },
    uploadStatus: {
      $ref: '#/components/schemas/UploadStatus',
    },
    uploadFileType: {
      $ref: '#/components/schemas/UploadFileType',
    },
    uploadFileCategory: {
      $ref: '#/components/schemas/UploadFileCategory',
    },
  },
  additionalProperties: false,
} as const;

export const UploadStatusSchema = {
  enum: ['Started', 'Completed', 'Failed'],
  type: 'string',
} as const;
