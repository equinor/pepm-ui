// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from '@hey-api/client-axios';
import type {
  PutApiV1AnalogueModelsByAnalogueModelIdConfigurationByArchelIdArchelMapData,
  PutApiV1AnalogueModelsByAnalogueModelIdConfigurationByArchelIdArchelMapResponse,
  PutApiV1AnalogueModelsByAnalogueModelIdConfigurationByArchelIdArchelMapError,
  GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsData,
  GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsResponse,
  GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsError,
  GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdData,
  GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdResponse,
  GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdError,
  GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataData,
  GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataResponse,
  GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataError,
  GetApiV1AnalogueModelsByIdComputeCasesData,
  GetApiV1AnalogueModelsByIdComputeCasesResponse,
  GetApiV1AnalogueModelsByIdComputeCasesError,
  PostApiV1AnalogueModelsByIdComputeCasesData,
  PostApiV1AnalogueModelsByIdComputeCasesResponse,
  PostApiV1AnalogueModelsByIdComputeCasesError,
  DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdData,
  DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponse,
  DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdError,
  PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdData,
  PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponse,
  PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdError,
  GetApiV1AnalogueModelsData,
  GetApiV1AnalogueModelsResponse,
  GetApiV1AnalogueModelsError,
  PostApiV1AnalogueModelsData,
  PostApiV1AnalogueModelsResponse,
  PostApiV1AnalogueModelsError,
  DeleteApiV1AnalogueModelsByIdData,
  DeleteApiV1AnalogueModelsByIdResponse,
  DeleteApiV1AnalogueModelsByIdError,
  GetApiV1AnalogueModelsByIdData,
  GetApiV1AnalogueModelsByIdResponse,
  GetApiV1AnalogueModelsByIdError,
  PatchApiV1AnalogueModelsByIdData,
  PatchApiV1AnalogueModelsByIdResponse,
  PatchApiV1AnalogueModelsByIdError,
  PutApiV1AnalogueModelsByIdData,
  PutApiV1AnalogueModelsByIdResponse,
  PutApiV1AnalogueModelsByIdError,
  PostApiV1AnalogueModelsByIdInputModelsData,
  PostApiV1AnalogueModelsByIdInputModelsResponse,
  PostApiV1AnalogueModelsByIdInputModelsError,
  PostApiV1AnalogueModelsByIdNetcdfModelsData,
  PostApiV1AnalogueModelsByIdNetcdfModelsResponse,
  PostApiV1AnalogueModelsByIdNetcdfModelsError,
  PostApiV1AnalogueModelsByIdModelAreasData,
  PostApiV1AnalogueModelsByIdModelAreasResponse,
  PostApiV1AnalogueModelsByIdModelAreasError,
  PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdData,
  PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdResponse,
  PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdError,
  PostApiV1AnalogueModelsByIdOutcropsData,
  PostApiV1AnalogueModelsByIdOutcropsResponse,
  PostApiV1AnalogueModelsByIdOutcropsError,
  DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdData,
  DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdResponse,
  DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdError,
  PostApiV1AnalogueModelsByIdStratigraphicGroupsData,
  PostApiV1AnalogueModelsByIdStratigraphicGroupsResponse,
  PostApiV1AnalogueModelsByIdStratigraphicGroupsError,
  PostApiV1AnalogueModelsByIdGeologicalGroupsData,
  PostApiV1AnalogueModelsByIdGeologicalGroupsResponse,
  PostApiV1AnalogueModelsByIdGeologicalGroupsError,
  DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdData,
  DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdResponse,
  DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdError,
  DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdData,
  DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdResponse,
  DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdError,
  GetApiV1ByAnalogueModelIdComputeSettingsData,
  GetApiV1ByAnalogueModelIdComputeSettingsResponse,
  GetApiV1ByAnalogueModelIdComputeSettingsError,
  GetApiV1DownloadsByIdResqmlData,
  GetApiV1DownloadsByIdResqmlResponse,
  GetApiV1DownloadsByIdResqmlError,
  GetApiV1DownloadsByIdIniData,
  GetApiV1DownloadsByIdIniResponse,
  GetApiV1DownloadsByIdIniError,
  GetApiV1DownloadsByIdNcData,
  GetApiV1DownloadsByIdNcResponse,
  GetApiV1DownloadsByIdNcError,
  GetApiV1DownloadsAnalogueModelsExcelData,
  GetApiV1DownloadsAnalogueModelsExcelResponse,
  GetApiV1DownloadsAnalogueModelsExcelError,
  GetApiV1ImagesVariogramByImageIdData,
  GetApiV1ImagesVariogramByImageIdResponse,
  GetApiV1ImagesVariogramByImageIdError,
  GetApiV1JobsData,
  GetApiV1JobsResponse,
  GetApiV1JobsError,
  GetApiV1JobsByIdData,
  GetApiV1JobsByIdResponse,
  GetApiV1JobsByIdError,
  GetApiV1JobsByIdStatusData,
  GetApiV1JobsByIdStatusResponse,
  GetApiV1JobsByIdStatusError,
  GetApiV1JobsStatusData,
  GetApiV1JobsStatusResponse,
  GetApiV1JobsStatusError,
  PostApiV1JobsCancelData,
  PostApiV1JobsCancelResponse,
  PostApiV1JobsCancelError,
  PostApiV1JobsComputeModelConversionsData,
  PostApiV1JobsComputeModelConversionsResponse,
  PostApiV1JobsComputeModelConversionsError,
  PostApiV1JobsComputeObjectEstimationsData,
  PostApiV1JobsComputeObjectEstimationsResponse,
  PostApiV1JobsComputeObjectEstimationsError,
  PostApiV1JobsComputeVariogramEstimationsData,
  PostApiV1JobsComputeVariogramEstimationsResponse,
  PostApiV1JobsComputeVariogramEstimationsError,
  PostApiV1JobsComputeThumbnailGenData,
  PostApiV1JobsComputeThumbnailGenResponse,
  PostApiV1JobsComputeThumbnailGenError,
  GetApiV1MetadataSmdaMetadataData,
  GetApiV1MetadataSmdaMetadataResponse,
  GetApiV1MetadataSmdaMetadataError,
  GetApiV1MetadataSmdaMetadataCountriesData,
  GetApiV1MetadataSmdaMetadataCountriesResponse,
  GetApiV1MetadataSmdaMetadataCountriesError,
  GetApiV1MetadataSmdaMetadataFieldsData,
  GetApiV1MetadataSmdaMetadataFieldsResponse,
  GetApiV1MetadataSmdaMetadataFieldsError,
  GetApiV1MetadataSmdaMetadataStratigraphicColumnsData,
  GetApiV1MetadataSmdaMetadataStratigraphicColumnsResponse,
  GetApiV1MetadataSmdaMetadataStratigraphicColumnsError,
  GetApiV1MetadataSmdaMetadataStratigraphicUnitsData,
  GetApiV1MetadataSmdaMetadataStratigraphicUnitsResponse,
  GetApiV1MetadataSmdaMetadataStratigraphicUnitsError,
  GetApiV1MetadataSmdaMetadataGeologyStandardsData,
  GetApiV1MetadataSmdaMetadataGeologyStandardsResponse,
  GetApiV1MetadataSmdaMetadataGeologyStandardsError,
  GetApiV1ModelareatypeData,
  GetApiV1ModelareatypeResponse,
  GetApiV1ModelareatypeError,
  GetApiV1OutcropsData,
  GetApiV1OutcropsResponse,
  GetApiV1OutcropsError,
  GetApiV1AnalogueModelsByIdResultsObjectData,
  GetApiV1AnalogueModelsByIdResultsObjectResponse,
  GetApiV1AnalogueModelsByIdResultsObjectError,
  GetApiV1AnalogueModelsByIdResultsVariogramData,
  GetApiV1AnalogueModelsByIdResultsVariogramResponse,
  GetApiV1AnalogueModelsByIdResultsVariogramError,
  PutApiV1AnalogueModelsByIdResultsObjectByObjectIdData,
  PutApiV1AnalogueModelsByIdResultsObjectByObjectIdResponse,
  PutApiV1AnalogueModelsByIdResultsObjectByObjectIdError,
  PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsData,
  PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsResponse,
  PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsError,
  GetApiV1UploadsData,
  GetApiV1UploadsResponse,
  GetApiV1UploadsError,
  GetApiV1UploadsByIdData,
  GetApiV1UploadsByIdResponse,
  GetApiV1UploadsByIdError,
  PostApiV1UploadsModelsData,
  PostApiV1UploadsModelsResponse,
  PostApiV1UploadsModelsError,
  PostApiV1UploadsModelsManifestData,
  PostApiV1UploadsModelsManifestResponse,
  PostApiV1UploadsModelsManifestError,
  PostApiV1UploadsModelsChunksData,
  PostApiV1UploadsModelsChunksResponse,
  PostApiV1UploadsModelsChunksError,
  PostApiV1UploadsModelsCompleteData,
  PostApiV1UploadsModelsCompleteResponse,
  PostApiV1UploadsModelsCompleteError,
  PostApiV1UploadsModelsByIdIniFileData,
  PostApiV1UploadsModelsByIdIniFileResponse,
  PostApiV1UploadsModelsByIdIniFileError,
  PostApiWebhooksNrresqmlStatusData,
  PostApiWebhooksNrresqmlStatusResponse,
  PostApiWebhooksNrresqmlStatusError,
  PostApiWebhooksThumbnailGenStatusData,
  PostApiWebhooksThumbnailGenStatusResponse,
  PostApiWebhooksThumbnailGenStatusError,
  PostApiWebhooksChannestStatusData,
  PostApiWebhooksChannestStatusResponse,
  PostApiWebhooksChannestStatusError,
  PostApiWebhooksVargrestStatusData,
  PostApiWebhooksVargrestStatusResponse,
  PostApiWebhooksVargrestStatusError,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';
import {
  getApiV1AnalogueModelsByIdResponseTransformer,
  getApiV1JobsResponseTransformer,
  postApiV1UploadsModelsManifestResponseTransformer,
} from './transformers.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const putApiV1AnalogueModelsByAnalogueModelIdConfigurationByArchelIdArchelMap =
  <ThrowOnError extends boolean = false>(
    options: Options<
      PutApiV1AnalogueModelsByAnalogueModelIdConfigurationByArchelIdArchelMapData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).put<
      PutApiV1AnalogueModelsByAnalogueModelIdConfigurationByArchelIdArchelMapResponse,
      PutApiV1AnalogueModelsByAnalogueModelIdConfigurationByArchelIdArchelMapError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/analogue-models/{analogueModelId}/configuration/{archelId}/archel-map',
      ...options,
      headers: {
        'Content-Type': 'application/json-patch+json',
        ...options?.headers,
      },
    });
  };

export const getApiV1AnalogueModelsByAnalogueModelIdComputeSettings = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsResponse,
    GetApiV1AnalogueModelsByAnalogueModelIdComputeSettingsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{analogueModelId}/compute-settings',
    ...options,
  });
};

export const getApiV1AnalogueModelsByAnalogueModelIdImagesByImageId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdResponse,
    GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdError,
    ThrowOnError
  >({
    responseType: 'blob',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{analogueModelId}/images/{imageId}',
    ...options,
  });
};

export const getApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadata = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataResponse,
    GetApiV1AnalogueModelsByAnalogueModelIdImagesByImageIdMetadataError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{analogueModelId}/images/{imageId}/metadata',
    ...options,
  });
};

export const getApiV1AnalogueModelsByIdComputeCases = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiV1AnalogueModelsByIdComputeCasesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1AnalogueModelsByIdComputeCasesResponse,
    GetApiV1AnalogueModelsByIdComputeCasesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/compute-cases',
    ...options,
  });
};

export const postApiV1AnalogueModelsByIdComputeCases = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiV1AnalogueModelsByIdComputeCasesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1AnalogueModelsByIdComputeCasesResponse,
    PostApiV1AnalogueModelsByIdComputeCasesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/compute-cases',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const deleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponse,
    DeleteApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/compute-cases/{computeCaseId}',
    ...options,
  });
};

export const putApiV1AnalogueModelsByIdComputeCasesByComputeCaseId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdResponse,
    PutApiV1AnalogueModelsByIdComputeCasesByComputeCaseIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/compute-cases/{computeCaseId}',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const getApiV1AnalogueModels = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1AnalogueModelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1AnalogueModelsResponse,
    GetApiV1AnalogueModelsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models',
    ...options,
  });
};

/**
 * Create new Analogue Model
 */
export const postApiV1AnalogueModels = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiV1AnalogueModelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiV1AnalogueModelsResponse,
    PostApiV1AnalogueModelsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

/**
 * Delete a AnalogueModel by id
 */
export const deleteApiV1AnalogueModelsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteApiV1AnalogueModelsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiV1AnalogueModelsByIdResponse,
    DeleteApiV1AnalogueModelsByIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}',
    ...options,
  });
};

/**
 * Get AnalogueModel by id
 */
export const getApiV1AnalogueModelsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiV1AnalogueModelsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1AnalogueModelsByIdResponse,
    GetApiV1AnalogueModelsByIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    responseTransformer: getApiV1AnalogueModelsByIdResponseTransformer,
    url: '/api/v1/analogue-models/{id}',
    ...options,
  });
};

/**
 * Patch a AnalogueModel by Id with new values
 */
export const patchApiV1AnalogueModelsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchApiV1AnalogueModelsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiV1AnalogueModelsByIdResponse,
    PatchApiV1AnalogueModelsByIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

/**
 * Update AnalogueModel by Id
 */
export const putApiV1AnalogueModelsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PutApiV1AnalogueModelsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiV1AnalogueModelsByIdResponse,
    PutApiV1AnalogueModelsByIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

/**
 * Upload model files that later can be converted to PEPM models.
 */
export const postApiV1AnalogueModelsByIdInputModels = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiV1AnalogueModelsByIdInputModelsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1AnalogueModelsByIdInputModelsResponse,
    PostApiV1AnalogueModelsByIdInputModelsError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/input-models',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

/**
 * Upload NetCDF model files that later can be converted to PEPM models.
 */
export const postApiV1AnalogueModelsByIdNetcdfModels = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiV1AnalogueModelsByIdNetcdfModelsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1AnalogueModelsByIdNetcdfModelsResponse,
    PostApiV1AnalogueModelsByIdNetcdfModelsError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/netcdf-models',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

export const postApiV1AnalogueModelsByIdModelAreas = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiV1AnalogueModelsByIdModelAreasData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1AnalogueModelsByIdModelAreasResponse,
    PostApiV1AnalogueModelsByIdModelAreasError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/model-areas',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const putApiV1AnalogueModelsByIdModelAreasByModelAreaId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdResponse,
    PutApiV1AnalogueModelsByIdModelAreasByModelAreaIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/model-areas/{modelAreaId}',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const postApiV1AnalogueModelsByIdOutcrops = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiV1AnalogueModelsByIdOutcropsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1AnalogueModelsByIdOutcropsResponse,
    PostApiV1AnalogueModelsByIdOutcropsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/outcrops',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const deleteApiV1AnalogueModelsByIdOutcropsByOutcropId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdResponse,
    DeleteApiV1AnalogueModelsByIdOutcropsByOutcropIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/outcrops/{outcropId}',
    ...options,
  });
};

export const postApiV1AnalogueModelsByIdStratigraphicGroups = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    PostApiV1AnalogueModelsByIdStratigraphicGroupsData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1AnalogueModelsByIdStratigraphicGroupsResponse,
    PostApiV1AnalogueModelsByIdStratigraphicGroupsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/stratigraphic-groups',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const postApiV1AnalogueModelsByIdGeologicalGroups = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    PostApiV1AnalogueModelsByIdGeologicalGroupsData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1AnalogueModelsByIdGeologicalGroupsResponse,
    PostApiV1AnalogueModelsByIdGeologicalGroupsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/geological-groups',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

/**
 * Deletes a geological group
 */
export const deleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupId =
  <ThrowOnError extends boolean = false>(
    options: Options<
      DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdResponse,
      DeleteApiV1AnalogueModelsByAnalogueModelIdGeologicalGroupsByGeologicalGroupIdError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/analogue-models/{analogueModelId}/geological-groups/{geologicalGroupId}',
      ...options,
    });
  };

/**
 * Deletes a stratigraphic group
 */
export const deleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupId =
  <ThrowOnError extends boolean = false>(
    options: Options<
      DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdResponse,
      DeleteApiV1AnalogueModelsByAnalogueModelIdStratigraphicGroupsByStratigraphicGroupIdError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/analogue-models/{analogueModelId}/stratigraphic-groups/{stratigraphicGroupId}',
      ...options,
    });
  };

export const getApiV1ByAnalogueModelIdComputeSettings = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiV1ByAnalogueModelIdComputeSettingsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1ByAnalogueModelIdComputeSettingsResponse,
    GetApiV1ByAnalogueModelIdComputeSettingsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/{analogueModelId}/compute-settings',
    ...options,
  });
};

export const getApiV1DownloadsByIdResqml = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiV1DownloadsByIdResqmlData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1DownloadsByIdResqmlResponse,
    GetApiV1DownloadsByIdResqmlError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/downloads/{id}/resqml',
    ...options,
  });
};

export const getApiV1DownloadsByIdIni = <ThrowOnError extends boolean = false>(
  options: Options<GetApiV1DownloadsByIdIniData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1DownloadsByIdIniResponse,
    GetApiV1DownloadsByIdIniError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/downloads/{id}/ini',
    ...options,
  });
};

export const getApiV1DownloadsByIdNc = <ThrowOnError extends boolean = false>(
  options: Options<GetApiV1DownloadsByIdNcData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1DownloadsByIdNcResponse,
    GetApiV1DownloadsByIdNcError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/downloads/{id}/nc',
    ...options,
  });
};

export const getApiV1DownloadsAnalogueModelsExcel = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetApiV1DownloadsAnalogueModelsExcelData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1DownloadsAnalogueModelsExcelResponse,
    GetApiV1DownloadsAnalogueModelsExcelError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/downloads/analogue-models-excel',
    ...options,
  });
};

export const getApiV1ImagesVariogramByImageId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiV1ImagesVariogramByImageIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1ImagesVariogramByImageIdResponse,
    GetApiV1ImagesVariogramByImageIdError,
    ThrowOnError
  >({
    responseType: 'blob',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/images/variogram/{imageId}',
    ...options,
  });
};

export const getApiV1Jobs = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1JobsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1JobsResponse,
    GetApiV1JobsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    responseTransformer: getApiV1JobsResponseTransformer,
    url: '/api/v1/jobs',
    ...options,
  });
};

export const getApiV1JobsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiV1JobsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1JobsByIdResponse,
    GetApiV1JobsByIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/jobs/{id}',
    ...options,
  });
};

/**
 * Get current job status for job. This will fetch current status from underlying compute engine and update the status for the supplied Job Id.
 */
export const getApiV1JobsByIdStatus = <ThrowOnError extends boolean = false>(
  options: Options<GetApiV1JobsByIdStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1JobsByIdStatusResponse,
    GetApiV1JobsByIdStatusError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/jobs/{id}/status',
    ...options,
  });
};

/**
 * Get current job status for all jobs. This will fetch current status from underlying compute engine and update the status for all matching Jobs.
 */
export const getApiV1JobsStatus = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1JobsStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1JobsStatusResponse,
    GetApiV1JobsStatusError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/jobs/status',
    ...options,
  });
};

/**
 * Cancel the running job.
 */
export const postApiV1JobsCancel = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiV1JobsCancelData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiV1JobsCancelResponse,
    PostApiV1JobsCancelError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/jobs/cancel',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

/**
 * Convert AnalogueModels to the internal format used by PEPM in order to perform calculations.
 */
export const postApiV1JobsComputeModelConversions = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiV1JobsComputeModelConversionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiV1JobsComputeModelConversionsResponse,
    PostApiV1JobsComputeModelConversionsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/jobs/compute/model-conversions',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

/**
 * Estimate channel on a Deltares based model.
 */
export const postApiV1JobsComputeObjectEstimations = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiV1JobsComputeObjectEstimationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiV1JobsComputeObjectEstimationsResponse,
    PostApiV1JobsComputeObjectEstimationsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/jobs/compute/object-estimations',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

/**
 * Estimate channel on a Deltares based model.
 */
export const postApiV1JobsComputeVariogramEstimations = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiV1JobsComputeVariogramEstimationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiV1JobsComputeVariogramEstimationsResponse,
    PostApiV1JobsComputeVariogramEstimationsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/jobs/compute/variogram-estimations',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

/**
 * Generate thumbnail for processed analogue model.
 */
export const postApiV1JobsComputeThumbnailGen = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiV1JobsComputeThumbnailGenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiV1JobsComputeThumbnailGenResponse,
    PostApiV1JobsComputeThumbnailGenError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/jobs/compute/thumbnail-gen',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const getApiV1MetadataSmdaMetadata = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetApiV1MetadataSmdaMetadataData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1MetadataSmdaMetadataResponse,
    GetApiV1MetadataSmdaMetadataError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/metadata/smda-metadata',
    ...options,
  });
};

export const getApiV1MetadataSmdaMetadataCountries = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetApiV1MetadataSmdaMetadataCountriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1MetadataSmdaMetadataCountriesResponse,
    GetApiV1MetadataSmdaMetadataCountriesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/metadata/smda-metadata/countries',
    ...options,
  });
};

export const getApiV1MetadataSmdaMetadataFields = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetApiV1MetadataSmdaMetadataFieldsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1MetadataSmdaMetadataFieldsResponse,
    GetApiV1MetadataSmdaMetadataFieldsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/metadata/smda-metadata/fields',
    ...options,
  });
};

export const getApiV1MetadataSmdaMetadataStratigraphicColumns = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetApiV1MetadataSmdaMetadataStratigraphicColumnsData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1MetadataSmdaMetadataStratigraphicColumnsResponse,
    GetApiV1MetadataSmdaMetadataStratigraphicColumnsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/metadata/smda-metadata/stratigraphic-columns',
    ...options,
  });
};

export const getApiV1MetadataSmdaMetadataStratigraphicUnits = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetApiV1MetadataSmdaMetadataStratigraphicUnitsData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1MetadataSmdaMetadataStratigraphicUnitsResponse,
    GetApiV1MetadataSmdaMetadataStratigraphicUnitsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/metadata/smda-metadata/stratigraphic-units',
    ...options,
  });
};

export const getApiV1MetadataSmdaMetadataGeologyStandards = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetApiV1MetadataSmdaMetadataGeologyStandardsData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1MetadataSmdaMetadataGeologyStandardsResponse,
    GetApiV1MetadataSmdaMetadataGeologyStandardsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/metadata/smda-metadata/geology-standards',
    ...options,
  });
};

export const getApiV1Modelareatype = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1ModelareatypeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1ModelareatypeResponse,
    GetApiV1ModelareatypeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/modelareatype',
    ...options,
  });
};

export const getApiV1Outcrops = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1OutcropsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1OutcropsResponse,
    GetApiV1OutcropsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/outcrops',
    ...options,
  });
};

/**
 * Returns channel estimation results
 */
export const getApiV1AnalogueModelsByIdResultsObject = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiV1AnalogueModelsByIdResultsObjectData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1AnalogueModelsByIdResultsObjectResponse,
    GetApiV1AnalogueModelsByIdResultsObjectError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/results/object',
    ...options,
  });
};

/**
 * Returns variogram estimation results
 */
export const getApiV1AnalogueModelsByIdResultsVariogram = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetApiV1AnalogueModelsByIdResultsVariogramData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1AnalogueModelsByIdResultsVariogramResponse,
    GetApiV1AnalogueModelsByIdResultsVariogramError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/results/variogram',
    ...options,
  });
};

export const putApiV1AnalogueModelsByIdResultsObjectByObjectId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    PutApiV1AnalogueModelsByIdResultsObjectByObjectIdData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiV1AnalogueModelsByIdResultsObjectByObjectIdResponse,
    PutApiV1AnalogueModelsByIdResultsObjectByObjectIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/results/object/{objectId}',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const putApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResults = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsResponse,
    PutApiV1AnalogueModelsByIdComputecasesByComputeCaseIdResultsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analogue-models/{id}/computecases/{computeCaseId}/results',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const getApiV1Uploads = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1UploadsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1UploadsResponse,
    GetApiV1UploadsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/uploads',
    ...options,
  });
};

export const getApiV1UploadsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiV1UploadsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1UploadsByIdResponse,
    GetApiV1UploadsByIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/uploads/{id}',
    ...options,
  });
};

/**
 * Upload model files that later can be converted to PEPM models.
 */
export const postApiV1UploadsModels = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiV1UploadsModelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiV1UploadsModelsResponse,
    PostApiV1UploadsModelsError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/uploads/models',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

export const postApiV1UploadsModelsManifest = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiV1UploadsModelsManifestData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiV1UploadsModelsManifestResponse,
    PostApiV1UploadsModelsManifestError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    responseTransformer: postApiV1UploadsModelsManifestResponseTransformer,
    url: '/api/v1/uploads/models/manifest',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

export const postApiV1UploadsModelsChunks = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiV1UploadsModelsChunksData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiV1UploadsModelsChunksResponse,
    PostApiV1UploadsModelsChunksError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/uploads/models/chunks',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

export const postApiV1UploadsModelsComplete = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiV1UploadsModelsCompleteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiV1UploadsModelsCompleteResponse,
    PostApiV1UploadsModelsCompleteError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/uploads/models/complete',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

export const postApiV1UploadsModelsByIdIniFile = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiV1UploadsModelsByIdIniFileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1UploadsModelsByIdIniFileResponse,
    PostApiV1UploadsModelsByIdIniFileError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/uploads/models/{id}/ini-file',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

/**
 * Update current job status for job. This will fetch current status from underlying compute engine and update the status for the supplied Job Name.
 */
export const postApiWebhooksNrresqmlStatus = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiWebhooksNrresqmlStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiWebhooksNrresqmlStatusResponse,
    PostApiWebhooksNrresqmlStatusError,
    ThrowOnError
  >({
    responseType: 'text',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/webhooks/nrresqml/status',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const postApiWebhooksThumbnailGenStatus = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiWebhooksThumbnailGenStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiWebhooksThumbnailGenStatusResponse,
    PostApiWebhooksThumbnailGenStatusError,
    ThrowOnError
  >({
    responseType: 'text',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/webhooks/thumbnail-gen/status',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const postApiWebhooksChannestStatus = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiWebhooksChannestStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiWebhooksChannestStatusResponse,
    PostApiWebhooksChannestStatusError,
    ThrowOnError
  >({
    responseType: 'text',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/webhooks/channest/status',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};

export const postApiWebhooksVargrestStatus = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiWebhooksVargrestStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiWebhooksVargrestStatusResponse,
    PostApiWebhooksVargrestStatusError,
    ThrowOnError
  >({
    responseType: 'text',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/webhooks/vargrest/status',
    ...options,
    headers: {
      'Content-Type': 'application/json-patch+json',
      ...options?.headers,
    },
  });
};
