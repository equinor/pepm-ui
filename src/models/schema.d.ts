/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/analoguemodels/{id}/parameters": {
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["AddAnalogueModelParameterCommandForm"];
          "application/json": components["schemas"]["AddAnalogueModelParameterCommandForm"];
          "text/json": components["schemas"]["AddAnalogueModelParameterCommandForm"];
          "application/*+json": components["schemas"]["AddAnalogueModelParameterCommandForm"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AddAnalogueModelParameterCommandResponse"];
          };
        };
      };
    };
  };
  "/api/analoguemodels": {
    /** Get a list of all AnalogueModels */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetAnalogueModelListQueryResponse"];
          };
        };
      };
    };
    /** Create new Analogue Model */
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["CreateAnalogueModelCommand"];
          "application/json": components["schemas"]["CreateAnalogueModelCommand"];
          "text/json": components["schemas"]["CreateAnalogueModelCommand"];
          "application/*+json": components["schemas"]["CreateAnalogueModelCommand"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CreateAnalogueModelCommandResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/analoguemodels/{id}": {
    /** Get AnalogueModel by id */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetAnalogueModelQueryResponse"];
          };
        };
      };
    };
    /** Update AnalogueModel by Id */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["UpdateAnalogueModelCommandBody"];
          "application/json": components["schemas"]["UpdateAnalogueModelCommandBody"];
          "text/json": components["schemas"]["UpdateAnalogueModelCommandBody"];
          "application/*+json": components["schemas"]["UpdateAnalogueModelCommandBody"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["UpdateAnalogueModelCommandResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Delete a AnalogueModel by id */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description No Content */
        204: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Patch a AnalogueModel by Id with new values */
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["Operation"][];
          "application/json": components["schemas"]["Operation"][];
          "text/json": components["schemas"]["Operation"][];
          "application/*+json": components["schemas"]["Operation"][];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PatchAnalogueModelCommandResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/analogues": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetAnalogueListQueryResponse"];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["CreateAnalogueCommand"];
          "application/json": components["schemas"]["CreateAnalogueCommand"];
          "text/json": components["schemas"]["CreateAnalogueCommand"];
          "application/*+json": components["schemas"]["CreateAnalogueCommand"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CreateAnalogueCommandResponse"];
          };
        };
      };
    };
  };
  "/api/jobs": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetJobListQueryResponse"];
          };
        };
      };
    };
  };
  "/api/jobs/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetJobDetailQueryResponse"];
          };
        };
      };
    };
  };
  "/api/jobs/{id}/status": {
    /** Get current job status for job. This will fetch current status from underlying compute engine and update the status for the supplied Job Id. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetCurrentJobStatusCommandResponse"];
          };
        };
      };
    };
  };
  "/api/jobs/status": {
    /** Get current job status for all jobs. This will fetch current status from underlying compute engine and update the status for all matching Jobs. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetCurrentJobStatusListCommand"];
          };
        };
      };
    };
    /** Update current job status for job. This will fetch current status from underlying compute engine and update the status for the supplied Job Name. */
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["UpdateJobStatusCommand"];
          "application/json": components["schemas"]["UpdateJobStatusCommand"];
          "text/json": components["schemas"]["UpdateJobStatusCommand"];
          "application/*+json": components["schemas"]["UpdateJobStatusCommand"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ConvertAnalogueModelCommandResponse"];
          };
        };
      };
    };
  };
  "/api/jobs/modelconversions": {
    /** Convert AnalogueModels to the internal format used by PEPM in order to perform calculations. */
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ConvertAnalogueModelCommand"];
          "application/json": components["schemas"]["ConvertAnalogueModelCommand"];
          "text/json": components["schemas"]["ConvertAnalogueModelCommand"];
          "application/*+json": components["schemas"]["ConvertAnalogueModelCommand"];
        };
      };
      responses: {
        /** @description Accepted */
        202: never;
      };
    };
  };
  "/api/parameters": {
    /** Get a list of all Parameters */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetParameterListQueryResponse"];
          };
        };
      };
    };
    /** Create new Parameter */
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["CreateParameterCommand"];
          "application/json": components["schemas"]["CreateParameterCommand"];
          "text/json": components["schemas"]["CreateParameterCommand"];
          "application/*+json": components["schemas"]["CreateParameterCommand"];
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/parameters/{id}": {
    /** Get Parameter details by Id */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetParameterDetailQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Update Parameter by Id */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["UpdateParameterCommandBody"];
          "application/json": components["schemas"]["UpdateParameterCommandBody"];
          "text/json": components["schemas"]["UpdateParameterCommandBody"];
          "application/*+json": components["schemas"]["UpdateParameterCommandBody"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["UpdateParameterCommandResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Delete a parameter by id */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description No Content */
        204: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Patch a Parameter by Id with new values */
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["Operation"][];
          "application/json": components["schemas"]["Operation"][];
          "text/json": components["schemas"]["Operation"][];
          "application/*+json": components["schemas"]["Operation"][];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PatchParameterCommandResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/uploads": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetUploadListQueryResponse"];
          };
        };
      };
    };
  };
  "/api/uploads/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetUploadDetailQueryResponse"];
          };
        };
      };
    };
  };
  "/api/uploads/models": {
    /** Upload model files that is converted to PEPM models. */
    post: {
      requestBody?: {
        content: {
          "multipart/form-data": {
            /** Format: uuid */
            ModelId?: string;
            /** Format: binary */
            File?: string;
            FileType?: components["schemas"]["UploadFileType"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["UploadAnalogueModelCommandResponse"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AddAnalogueModelParameterCommandForm: {
      parameters?: components["schemas"]["AddParameterDto"][] | null;
    };
    AddAnalogueModelParameterCommandResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["AddAnalogueModelParameterDto"];
    };
    AddAnalogueModelParameterDto: {
      /** Format: uuid */
      analogueModelId?: string;
      name?: string | null;
      description?: string | null;
      sourceType?: string | null;
      parameters?: components["schemas"]["AddParameterDto"][] | null;
    };
    AddParameterDto: {
      /** Format: uuid */
      parameterId?: string;
      parameterValue?: string | null;
    };
    AnalogueList: {
      /** Format: uuid */
      analogueId?: string;
      name?: string | null;
      description?: string | null;
    };
    AnalogueModelDetail: {
      /** Format: uuid */
      analogueModelId?: string;
      name?: string | null;
      description?: string | null;
      isProcessed?: boolean;
      sourceType?: components["schemas"]["AnalogueModelSourceType"];
      analogues?: components["schemas"]["AnalogueList"][] | null;
      fileUploads?: components["schemas"]["UploadList"][] | null;
    };
    AnalogueModelList: {
      /** Format: uuid */
      analogueModelId?: string;
      name?: string | null;
      description?: string | null;
      isProcessed?: boolean;
      sourceType?: components["schemas"]["AnalogueModelSourceType"];
    };
    /** @enum {string} */
    AnalogueModelSourceType: "Deltares" | "ResQML";
    ConvertAnalogueModelCommand: {
      /** Format: uuid */
      modelId?: string;
    };
    ConvertAnalogueModelCommandResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["ConvertAnalogueModelDto"];
    };
    ConvertAnalogueModelDto: {
      /** Format: uuid */
      jobId?: string;
      name?: string | null;
      jobStatus?: components["schemas"]["JobStatus"];
      jobType?: components["schemas"]["JobType"];
    };
    CreateAnalogueCommand: {
      name?: string | null;
      description?: string | null;
    };
    CreateAnalogueCommandResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["CreateAnalogueDto"];
    };
    CreateAnalogueDto: {
      /** Format: uuid */
      analogueId?: string;
      name?: string | null;
      description?: string | null;
    };
    CreateAnalogueModelCommand: {
      name?: string | null;
      description?: string | null;
      sourceType?: string | null;
    };
    CreateAnalogueModelCommandResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["CreateAnalogueModelDto"];
    };
    CreateAnalogueModelDto: {
      /** Format: uuid */
      analogueModelId?: string;
      name?: string | null;
      description?: string | null;
    };
    CreateParameterCommand: {
      identifier?: string | null;
      name?: string | null;
      description?: string | null;
    };
    ErrorResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: string;
    };
    GetAnalogueListQueryResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["AnalogueList"][];
    };
    GetAnalogueModelListQueryResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["AnalogueModelList"][];
    };
    GetAnalogueModelQueryResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["AnalogueModelDetail"];
    };
    GetCurrentJobStatusCommandResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["GetCurrentJobStatusDto"];
    };
    GetCurrentJobStatusDto: {
      /** Format: uuid */
      jobId?: string;
      name?: string | null;
      jobStatus?: components["schemas"]["JobStatus"];
      jobType?: components["schemas"]["JobType"];
    };
    GetCurrentJobStatusListCommand: Record<string, never>;
    GetJobDetailQueryResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["JobDetail"];
    };
    GetJobListQueryResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["JobList"][];
    };
    GetParameterDetailQueryResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["ParameterDetail"];
    };
    GetParameterListQueryResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["ParameterList"][];
    };
    GetUploadDetailQueryResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["UploadDetail"];
    };
    GetUploadListQueryResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["UploadList"][];
    };
    JobDetail: {
      /** Format: uuid */
      jobId?: string;
      name?: string | null;
      jobStatus?: components["schemas"]["JobStatus"];
      jobType?: components["schemas"]["JobType"];
    };
    JobList: {
      /** Format: uuid */
      jobId?: string;
      name?: string | null;
      jobStatus?: components["schemas"]["JobStatus"];
      jobType?: components["schemas"]["JobType"];
      /** Format: date-time */
      updated?: string;
      uploads?: components["schemas"]["JobListUploadsDto"][] | null;
    };
    JobListUploadsDto: {
      /** Format: uuid */
      uploadId?: string;
      uploadStatus?: components["schemas"]["UploadStatus"];
      uploadFileType?: components["schemas"]["UploadFileType"];
    };
    /** @enum {string} */
    JobStatus: "Unknown" | "Created" | "Started" | "Running" | "Successful" | "Succeeded" | "Failed";
    /** @enum {string} */
    JobType: "Nrresqml" | "Nrchannel" | "Nrvariogram";
    Operation: {
      operationType?: components["schemas"]["OperationType"];
      path?: string | null;
      op?: string | null;
      from?: string | null;
      value?: Record<string, unknown> | null;
    };
    /** @enum {string} */
    OperationType: "Add" | "Remove" | "Replace" | "Move" | "Copy" | "Test" | "Invalid";
    ParameterDetail: {
      /** Format: uuid */
      parameterId?: string;
      identifier?: string | null;
      name?: string | null;
      description?: string | null;
    };
    ParameterList: {
      /** Format: uuid */
      parameterId?: string;
      identifier?: string | null;
      name?: string | null;
      description?: string | null;
    };
    PatchAnalogueModelCommandResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["PatchAnalogueModelDto"];
    };
    PatchAnalogueModelDto: {
      /** Format: uuid */
      analogueModelId?: string;
      name?: string | null;
      description?: string | null;
    };
    PatchParameterCommandResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["PatchParameterDto"];
    };
    PatchParameterDto: {
      /** Format: uuid */
      parameterId?: string;
      identifier?: string | null;
      name?: string | null;
      description?: string | null;
    };
    UpdateAnalogueModelCommandBody: {
      name?: string | null;
      description?: string | null;
      sourceType?: string | null;
    };
    UpdateAnalogueModelCommandResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["UpdateAnalogueModelDto"];
    };
    UpdateAnalogueModelDto: {
      /** Format: uuid */
      analogueModelId?: string;
      name?: string | null;
      description?: string | null;
      sourceType?: string | null;
    };
    UpdateJobStatusCommand: {
      name?: string | null;
      started?: string | null;
      ended?: string | null;
      status?: string | null;
    };
    UpdateParameterCommandBody: {
      identifier?: string | null;
      name?: string | null;
      description?: string | null;
    };
    UpdateParameterCommandResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["UpdateParameterDto"];
    };
    UpdateParameterDto: {
      /** Format: uuid */
      parameterId?: string;
      identifier?: string | null;
      name?: string | null;
      description?: string | null;
    };
    UploadAnalogueModelCommandResponse: {
      success?: boolean;
      /** Format: int32 */
      count?: number | null;
      message?: string | null;
      validationErrors?: string[] | null;
      data: components["schemas"]["UploadAnalogueModelDto"];
    };
    UploadAnalogueModelDto: {
      /** Format: uuid */
      uploadId?: string;
      uploadStatus?: components["schemas"]["UploadStatus"];
      processed?: boolean;
    };
    UploadDetail: {
      /** Format: uuid */
      uploadId?: string;
      originalFileName?: string | null;
      uploadStatus?: components["schemas"]["UploadStatus"];
      uploadFileType?: components["schemas"]["UploadFileType"];
      uploadFileCategory?: components["schemas"]["UploadFileCategory"];
      processed?: boolean;
    };
    /** @enum {string} */
    UploadFileCategory: "InputModel" | "InputMetadata" | "ResQmlModel";
    /** @enum {string} */
    UploadFileType: "NetCDF" | "ResQMLEpc" | "ResQMLData";
    UploadList: {
      /** Format: uuid */
      uploadId?: string;
      /** Format: uuid */
      analogueModelId?: string;
      originalFileName?: string | null;
      uploadStatus?: components["schemas"]["UploadStatus"];
      uploadFileType?: components["schemas"]["UploadFileType"];
      uploadFileCategory?: components["schemas"]["UploadFileCategory"];
      processed?: boolean;
    };
    /** @enum {string} */
    UploadStatus: "Started" | "ReadyForProcessing" | "Processing" | "Processed" | "Failed";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
